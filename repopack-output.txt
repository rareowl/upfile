This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-02T00:28:27.340Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
public/
  about.ejs
  admin-settings.ejs
  admin-user-details.ejs
  download.ejs
  index.ejs
  login.ejs
  profile.ejs
  register.ejs
  style.css
  test-throttling.ejs
.gitignore
package.json
server.js

================================================================
Repository Files
================================================================

================
File: public/about.ejs
================
<!DOCTYPE html>
<html lang="en" data-theme="<%= theme %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>About Us - upfile.1</title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <a href="/" class="logo">upfile.1</a>
    <div class="auth-links">
        <a href="/register">register</a> | <a href="/login">login</a>
    </div>
    
    <div class="container">
        <div class="about-content">
            <h2>About Us</h2>
            <p>upfile.1 is a simple, secure file sharing service designed with simplicity and efficiency in mind.</p>
            <p>Our mission is to provide a straightforward way to share files without unnecessary complications.</p>
            <!-- Add more content as needed -->
        </div>
    </div>

    <div class="footer">
        <a href="/about">about us</a>
    </div>

    <style>
        .about-content {
            max-width: 600px;
            text-align: center;
            line-height: 1.6;
        }

        .about-content h2 {
            margin-bottom: 2rem;
        }

        .about-content p {
            margin-bottom: 1rem;
        }
    </style>
</body>
</html>

================
File: public/admin-settings.ejs
================
<!DOCTYPE html>
<html lang="en" data-theme="<%= theme %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Settings - upfile.1</title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <a href="/" class="logo">upfile.1</a>
    <div class="auth-links">
        <a href="/profile">profile</a> | <a href="/logout">logout</a>
    </div>
    
    <div class="container">
        <div class="admin-settings">
            <h2>Admin Settings</h2>
            
            <div class="settings-tabs">
                <button class="tab-button active" onclick="openTab('general')">general</button>
                <button class="tab-button" onclick="openTab('display')">display</button>
                <button class="tab-button" onclick="openTab('users')">users</button>
            </div>
            

            <!-- General Settings Tab -->
            <div id="general" class="tab-content active">
                <form action="/admin-settings/general" method="POST" class="settings-form">
                    <div class="form-group">
                        <label for="maxUploadSize">maximum upload size (MB):</label>
                        <input type="number" 
                               id="maxUploadSize" 
                               name="maxUploadSize" 
                               value="<%= Math.floor(settings.maxUploadSize / (1024 * 1024)) %>" 
                               required>
                    </div>

                    <div class="form-group">
                        <label for="maxDownloadSize">download limit before throttling (GB):</label>
                        <input type="number" 
                               id="maxDownloadSize" 
                               name="maxDownloadSize" 
                               value="<%= Math.floor(settings.maxDownloadSize / (1024 * 1024 * 1024)) %>" 
                               required>
                    </div>

<div class="form-group">
    <label for="throttleSpeed">throttled download speed (MB/s):</label>
    <input type="number" 
           id="throttleSpeed" 
           name="throttleSpeed" 
           step="0.1"
           min="0.1"
           value="<%= (settings.throttleSpeed / (1024 * 1024)).toFixed(1) %>" 
           required>
    <small class="input-help">Set the speed limit for throttled downloads (in MB/s)</small>
</div>


                    <div class="form-group">
                        <label for="encryptionEnabled">file encryption:</label>
                        <input type="number" style="display: none;" aria-hidden="true"><!-- This helps match the styling -->
                        <select id="encryptionEnabled" name="encryptionEnabled" class="settings-select">
                            <option value="true" <%= settings.encryptionEnabled === true ? 'selected' : '' %>>enabled</option>
                            <option value="false" <%= settings.encryptionEnabled === false ? 'selected' : '' %>>disabled</option>
                        </select>
                    </div>

                    <button type="submit">save general settings</button>
                </form>
            </div>

            <!-- Display Settings Tab -->
<!-- Display Settings Tab -->
<div id="display" class="tab-content">
    <form action="/admin-settings/display" method="POST" class="settings-form">
        <div class="form-group">
            <label for="defaultTheme">default theme:</label>
            <select id="defaultTheme" name="defaultTheme" class="settings-select">
                <option value="light" <%= settings.defaultTheme === 'light' ? 'selected' : '' %>>light</option>
                <option value="dark" <%= settings.defaultTheme === 'dark' ? 'selected' : '' %>>dark</option>
            </select>
        </div>
        <button type="submit">save display settings</button>
    </form>
</div>

<!-- Users Tab - Now properly separated -->
<div id="users" class="tab-content">
    <div class="users-list">
        <h3>Registered Users</h3>
        <div class="users-grid">
            <% if (users && users.length > 0) { %>
                <% users.forEach(user => { %>
                    <a href="/admin/user/<%= user._id %>" class="user-card">
                        <div class="user-info">
                            <span class="username"><%= user.username %></span>
                            <span class="email"><%= user.email %></span>
                            <span class="joined">Joined: <%= user.createdAt.toLocaleDateString() %></span>
                            <% if (user.isAdmin) { %>
                                <span class="admin-badge">Admin</span>
                            <% } %>
                            <% if (user.isBanned) { %>
                                <span class="banned-badge">Banned</span>
                            <% } %>
                        </div>
                    </a>
                <% }); %>
            <% } else { %>
                <p class="no-users">No registered users found.</p>
            <% } %>
        </div>
    </div>
</div>

<div class="settings-info">
    <p>last updated: <%= settings.lastUpdated.toLocaleString() %></p>
</div>

                    <button type="submit">save display settings</button>
                </form>
            </div>

            <div class="settings-info">
                <p>last updated: <%= settings.lastUpdated.toLocaleString() %></p>
            </div>
        </div>
    </div>

    <style>
        .settings-tabs {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 1rem;
        }

        .tab-button {
            background: none;
            border: none;
            color: #666;
            cursor: pointer;
            font-family: 'Courier New', monospace;
            font-size: 1rem;
            padding: 0.5rem 1rem;
            transition: color 0.2s;
        }

        .tab-button:hover {
            color: var(--text-color);
        }

        .tab-button.active {
            color: var(--text-color);
            border-bottom: 2px solid var(--border-color);
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        /* Updated select styling to match number inputs */
        .settings-select {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            font-family: 'Courier New', monospace;
            background-color: var(--input-bg);
            color: var(--text-color);
            height: 35px; /* Match the height of number inputs */
            font-size: 0.9rem;
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            cursor: pointer;
            background-image: url("data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23666666%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E");
            background-repeat: no-repeat;
            background-position: right 0.7rem top 50%;
            background-size: 0.65rem auto;
            padding-right: 1.5rem;
        }

        .settings-select:hover {
            border-color: var(--text-color);
        }

        .settings-select:focus {
            outline: none;
            border-color: var(--text-color);
        }

        /* Style the form groups consistently */
        .form-group {
            margin-bottom: 1rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: var(--text-color);
        }

        /* Match input styling */
        .form-group input[type="number"],
        .form-group .settings-select {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            font-size: 0.9rem;
            background-color: var(--input-bg);
            color: var(--text-color);
            height: 35px;
        }

        /* Consistent hover and focus states */
        .form-group input[type="number"]:hover,
        .form-group .settings-select:hover {
            border-color: var(--text-color);
        }

        .form-group input[type="number"]:focus,
        .form-group .settings-select:focus {
            outline: none;
            border-color: var(--text-color);
        }

        .users-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 1rem;
        padding: 1rem 0;
    }

    .user-card {
        padding: 1rem;
        border: 1px solid var(--border-color);
        border-radius: 4px;
        text-decoration: none;
        color: var(--text-color);
        transition: all 0.2s ease;
        background-color: var(--input-bg);
    }

    .user-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .user-info {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .username {
        font-weight: bold;
        font-size: 1.1rem;
    }

    .email {
        color: #666;
        font-size: 0.9rem;
    }

    .joined {
        font-size: 0.8rem;
        color: #888;
    }

    .admin-badge {
        background-color: #ffeb3b;
        color: #000;
        padding: 0.2rem 0.5rem;
        border-radius: 4px;
        font-size: 0.8rem;
        width: fit-content;
    }
</style>
    </style>

    <script>
        function openTab(tabName) {
            // Hide all tab content
            const tabContents = document.getElementsByClassName('tab-content');
            for (let content of tabContents) {
                content.classList.remove('active');
            }

            // Deactivate all tabs
            const tabButtons = document.getElementsByClassName('tab-button');
            for (let button of tabButtons) {
                button.classList.remove('active');
            }

            // Show selected tab content and activate tab
            document.getElementById(tabName).classList.add('active');
            event.currentTarget.classList.add('active');
        }
    </script>
</body>
</html>

================
File: public/admin-user-details.ejs
================
<!DOCTYPE html>
<html lang="en" data-theme="<%= theme %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Details - Admin Panel</title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <a href="/" class="logo">upfile.1</a>
    <div class="auth-links">
        <a href="/admin-settings">admin panel</a> | <a href="/logout">logout</a>
    </div>
    
    <div class="container">
        <div class="user-details">
            <div class="user-header">
                <h2><%= userData.username %>'s Account</h2>
                <% if (userData.isAdmin) { %>
                    <span class="admin-badge">Admin</span>
                <% } %>
            </div>

            <div class="stats-grid">
                <div class="stat-card">
                    <span class="stat-label">Total Uploads</span>
                    <span class="stat-value"><%= userData.uploadedFiles.length %></span>
                </div>
                <div class="stat-card">
                    <span class="stat-label">Total Storage Used</span>
                    <span class="stat-value"><%= formatBytes(totalStorageUsed) %></span>
                </div>
                <div class="stat-card">
                    <span class="stat-label">Account Created</span>
                    <span class="stat-value"><%= userData.createdAt.toLocaleDateString() %></span>
                </div>
                <div class="stat-card">
                    <span class="stat-label">Email</span>
                    <span class="stat-value"><%= userData.email %></span>
                </div>
            </div>

            <div class="actions-panel">
                <h3>Account Actions</h3>
                <form action="/admin/user/<%= userData._id %>/ban" method="POST" class="ban-form">
                    <div class="form-group">
                        <label for="banReason">Ban Reason:</label>
                        <input type="text" id="banReason" name="banReason" required>
                    </div>
                    <button type="submit" class="ban-button">Ban User & IP</button>
                </form>
            </div>

            <div class="files-section">
                <h3>Uploaded Files</h3>
                <div class="files-grid">
                    <% userData.uploadedFiles.forEach(file => { %>
                        <div class="file-card">
                            <div class="file-info">
                                <span class="file-name"><%= file.fileName %></span>
                                <span class="upload-date">Uploaded: <%= file.uploadDate.toLocaleDateString() %></span>
                            </div>
                            <form action="/admin/file/<%= file.fileId %>/delete" method="POST" class="file-actions">
                                <button type="submit" class="delete-button">Delete</button>
                            </form>
                        </div>
                    <% }); %>
                </div>
            </div>
        </div>
    </div>

    <style>
        .user-details {
            width: 100%;
            max-width: 800px;
            margin: 0 auto;
        }

        .user-header {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            padding: 1rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            background-color: var(--input-bg);
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .stat-label {
            font-size: 0.9rem;
            color: #666;
        }

        .stat-value {
            font-size: 1.2rem;
            font-weight: bold;
        }

        .actions-panel {
            margin: 2rem 0;
            padding: 1rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            background-color: var(--input-bg);
        }

        .ban-form {
            margin-top: 1rem;
        }

        .ban-button {
            background-color: #ff4d4d;
            color: white;
        }

        .ban-button:hover {
            background-color: #ff3333;
        }

        .files-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }

        .file-card {
            padding: 1rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            background-color: var(--input-bg);
        }

        .file-info {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .file-name {
            font-weight: bold;
        }

        .upload-date {
            font-size: 0.8rem;
            color: #666;
        }
    </style>
</body>
</html>

================
File: public/download.ejs
================
<!DOCTYPE html>
<html lang="en" data-theme="<%= theme %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Download - upfile.1</title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <a href="/" class="logo">upfile.1</a>
    
    <div class="container">
        <div class="download-info">
            <div class="info-row">
                <span class="label">file:</span>
                <span class="value"><%= fileName %></span>
            </div>
            <div class="info-row">
                <span class="label">size:</span>
                <span class="value"><%= fileSize %></span>
            </div>
            <% if (encrypted) { %>
            <div class="info-row">
                <span class="label">status:</span>
                <span class="value">encrypted</span>
            </div>
            <% } %>
        </div>
        <button onclick="startDownload()" class="download-button" id="downloadButton">download</button>

        <!-- Progress container -->
        <div class="progress-container" id="progressContainer" style="display: none;">
            <div class="progress">
                <div class="progress-bar" id="progressBar"></div>
            </div>
            <div class="progress-text" id="progressText">0%</div>
            <div class="progress-detail" id="progressDetail"></div>
        </div>
    </div>

    <script>
        // Utility function to format bytes
        function formatBytes(bytes, decimals = 2) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const dm = decimals < 0 ? 0 : decimals;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
        }

        // Progress UI elements
        const progressContainer = document.getElementById('progressContainer');
        const progressBar = document.getElementById('progressBar');
        const progressText = document.getElementById('progressText');
        const progressDetail = document.getElementById('progressDetail');
        const downloadButton = document.getElementById('downloadButton');

        // Update progress UI
        function updateProgress(percent, detail) {
            progressBar.style.width = `${percent}%`;
            progressText.textContent = `${Math.round(percent)}%`;
            if (detail) progressDetail.textContent = detail;
        }

        async function importKey(keyHex) {
            try {
                const keyData = new Uint8Array(keyHex.match(/.{2}/g).map(byte => parseInt(byte, 16)));
                return await window.crypto.subtle.importKey(
                    "raw",
                    keyData,
                    "AES-GCM",
                    true,
                    ["decrypt"]
                );
            } catch (error) {
                console.error('Error importing key:', error);
                throw new Error('Failed to import decryption key');
            }
        }

        async function decryptData(encryptedData, key, iv) {
            try {
                updateProgress(60, 'Decrypting file...');
                
                const decryptedContent = await window.crypto.subtle.decrypt(
                    {
                        name: "AES-GCM",
                        iv: iv
                    },
                    key,
                    encryptedData
                );

                updateProgress(90, 'Decryption complete');
                return new Blob([decryptedContent]);
            } catch (error) {
                console.error('Decryption error:', error);
                throw new Error('Failed to decrypt file');
            }
        }

        async function decryptFile(encryptedBlob, keyHex, ivHex) {
    try {
        updateProgress(55, 'Preparing for decryption...');
        
        // Import the key
        const keyData = new Uint8Array(keyHex.match(/.{2}/g).map(byte => parseInt(byte, 16)));
        const key = await window.crypto.subtle.importKey(
            "raw",
            keyData,
            "AES-GCM",
            true,
            ["decrypt"]
        );
        
        // Prepare IV
        const iv = new Uint8Array(ivHex.match(/.{2}/g).map(byte => parseInt(byte, 16)));
        
        updateProgress(60, 'Reading encrypted file...');
        
        // Convert blob to ArrayBuffer
        const encryptedBuffer = await encryptedBlob.arrayBuffer();
        
        updateProgress(70, `Decrypting ${formatBytes(encryptedBuffer.byteLength)}...`);
        
        // Decrypt the entire file at once
        const decryptedContent = await window.crypto.subtle.decrypt(
            {
                name: "AES-GCM",
                iv: iv
            },
            key,
            encryptedBuffer
        );
        
        updateProgress(90, 'Decryption complete!');
        
        // Create a blob from the decrypted content
        return new Blob([decryptedContent]);
    } catch (error) {
        console.error('Decryption error:', error);
        throw new Error('Failed to decrypt file: ' + error.message);
    }
}


        async function startDownload() {
    try {
        downloadButton.disabled = true;
        progressContainer.style.display = 'block';
        updateProgress(0, 'Checking download status...');

        const response = await fetch('/check-download-status');
        if (!response.ok) {
            throw new Error('Failed to check download status');
        }
        const data = await response.json();
        
        if (data.willBeThrottled) {
            alert('You have exceeded your download limit. Download speed will be throttled.');
        }

        updateProgress(10, 'Starting download...');

        // Download file
        const downloadResponse = await fetch(window.location.pathname + '/download');
        if (!downloadResponse.ok) {
            throw new Error(`Download failed with status: ${downloadResponse.status}`);
        }

        const contentLength = downloadResponse.headers.get('Content-Length');
        const isEncrypted = downloadResponse.headers.get('X-File-Encrypted') === 'true';
        
        // Read the response as a blob
        updateProgress(20, 'Reading response...');
        const blob = await downloadResponse.blob();
        updateProgress(50, 'Download complete. Processing...');

        if (isEncrypted) {
            // Get decryption parameters from URL fragment
            const fragment = window.location.hash.substring(1);
            const params = new URLSearchParams(fragment);
            const keyHex = params.get('key');
            const ivHex = params.get('iv');

            if (!keyHex || !ivHex) {
                throw new Error('Missing decryption keys. The download link may be incomplete.');
            }

            try {
                // Decrypt the file
                const decryptedBlob = await decryptFile(blob, keyHex, ivHex);
                
                // Trigger download
                updateProgress(95, 'Preparing final download...');
                const url = window.URL.createObjectURL(decryptedBlob);
                const a = document.createElement('a');
                a.href = url;
                a.download = '<%= fileName %>';
                document.body.appendChild(a);
                
                updateProgress(100, 'Starting file download...');
                a.click();
                
                // Cleanup
                setTimeout(() => {
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);
                    progressContainer.style.display = 'none';
                    downloadButton.disabled = false;
                }, 1000);
            } catch (error) {
                throw new Error('Decryption failed: ' + error.message);
            }
        } else {
            // Handle unencrypted file
            updateProgress(90, 'Preparing download...');
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = '<%= fileName %>';
            document.body.appendChild(a);
            
            updateProgress(100, 'Starting file download...');
            a.click();
            
            // Cleanup
            setTimeout(() => {
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
                progressContainer.style.display = 'none';
                downloadButton.disabled = false;
            }, 1000);
        }
    } catch (error) {
        console.error('Download error:', error);
        progressDetail.textContent = 'Error: ' + error.message;
        progressContainer.style.display = 'none';
        downloadButton.disabled = false;
        alert('Download failed: ' + error.message);
    }
}
    </script>

    <style>
        .progress-container {
            width: 100%;
            max-width: 400px;
            margin: 2rem auto;
            padding: 1rem;
            background-color: var(--input-bg);
            border-radius: 4px;
            border: 1px solid var(--border-color);
        }

        .progress {
            width: 100%;
            height: 4px;
            background-color: var(--border-color);
            border-radius: 2px;
            overflow: hidden;
            margin-bottom: 0.5rem;
        }

        .progress-bar {
            height: 100%;
            background-color: var(--text-color);
            width: 0%;
            transition: width 0.3s ease;
        }

        .progress-text {
            text-align: center;
            font-size: 0.9rem;
            margin-bottom: 0.5rem;
        }

        .progress-detail {
            text-align: center;
            font-size: 0.8rem;
            color: #666;
        }

        .download-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
    </style>

    <div class="footer">
        <a href="/about">about us</a>
    </div>
</body>
</html>

================
File: public/index.ejs
================
<!DOCTYPE html>
<html lang="en" data-theme="<%= theme %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>upfile.1 - File Sharing</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <a href="/" class="logo">upfile.1</a>
    <div class="auth-links">
        <% if (session.userId) { %>
            <a href="/profile">profile</a> | <a href="/logout">logout</a>
        <% } else { %>
            <a href="/register">register</a> | <a href="/login">login</a>
        <% } %>
    </div>
    <div class="container">
        <div class="upload-form">
            <input type="file" id="fileInput" name="file" required>
            <button id="uploadButton" onclick="uploadFile()">upload</button>
        </div>

        <!-- Progress bar container -->
<!-- Replace the existing progress-container div in public/index.ejs -->
<div class="progress-container" id="progressContainer" style="display: none;">
    <!-- Progress stages -->
    <div class="progress-stages">
        <div class="stage-line"></div>
        <div class="progress-stage" id="stagePrep">
            <div class="stage-dot"></div>
            <div class="stage-label">Prep</div>
        </div>
        <div class="progress-stage" id="stageUpload">
            <div class="stage-dot"></div>
            <div class="stage-label">Upload</div>
        </div>
        <div class="progress-stage" id="stageProcess">
            <div class="stage-dot"></div>
            <div class="stage-label">Process</div>
        </div>
        <div class="progress-stage" id="stageComplete">
            <div class="stage-dot"></div>
            <div class="stage-label">Done</div>
        </div>
    </div>

    <!-- Progress stats -->
    <div class="progress-stats">
        <div class="progress-detail" id="progressDetail"></div>
        <div class="progress-text" id="progressText">0%</div>
    </div>

    <!-- Progress bar -->
    <div class="progress">
        <div class="progress-bar" id="progressBar"></div>
    </div>

    <!-- Status message -->
    <div class="progress-status" id="progressStatus"></div>
</div>

        <!-- Result message and success container -->
        <div class="result-message">
            <!-- Error messages will go here -->
            <div id="resultMessage"></div>
            <!-- Success message with link -->
            <div id="uploadSuccess" style="display: none;">
                <p>file uploaded successfully</p>
                <div class="link-container">
                    <a id="downloadLink" href="" target="_blank"></a>
                    <button id="copyButton" onclick="copyLink()">
                        copy
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Utility function to format bytes to human-readable size
        function formatBytes(bytes, decimals = 2) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const dm = decimals < 0 ? 0 : decimals;
            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
        }

        // Encryption helper functions
        async function generateKey() {
            return await window.crypto.subtle.generateKey(
                {
                    name: "AES-GCM",
                    length: 256
                },
                true,
                ["encrypt", "decrypt"]
            );
        }

        function updateStage(stageName) {
    // Reset all stages
    const stages = ['Prep', 'Upload', 'Process', 'Complete'];
    stages.forEach(stage => {
        const element = document.getElementById(`stage${stage}`);
        element.classList.remove('active', 'completed');
    });

    // Mark completed stages
    const currentIndex = stages.indexOf(stageName);
    for(let i = 0; i <= currentIndex; i++) {
        const element = document.getElementById(`stage${stages[i]}`);
        if (i < currentIndex) {
            element.classList.add('completed');
        } else if (i === currentIndex) {
            element.classList.add('active');
        }
    }
}

        async function exportKey(key) {
            const exported = await window.crypto.subtle.exportKey("raw", key);
            return Array.from(new Uint8Array(exported))
                .map(b => b.toString(16).padStart(2, '0'))
                .join('');
        }

        async function importKey(keyHex) {
            const keyData = new Uint8Array(keyHex.match(/.{2}/g).map(byte => parseInt(byte, 16)));
            return await window.crypto.subtle.importKey(
                "raw",
                keyData,
                "AES-GCM",
                true,
                ["encrypt", "decrypt"]
            );
        }

        async function encryptFile(file) {
    try {
        const key = await generateKey();
        const iv = window.crypto.getRandomValues(new Uint8Array(12));
        
        // Read the entire file as an ArrayBuffer
        const fileBuffer = await file.arrayBuffer();
        progressDetail.textContent = `Encrypting ${formatBytes(fileBuffer.byteLength)}...`;
        
        // Encrypt the entire file at once
        const encryptedContent = await window.crypto.subtle.encrypt(
            {
                name: "AES-GCM",
                iv: iv
            },
            key,
            fileBuffer
        );
        
        progressDetail.textContent = 'Encryption complete. Preparing for upload...';
        
        const encryptedFile = new File(
            [encryptedContent],
            file.name,
            { type: file.type }
        );

        const keyHex = await exportKey(key);
        const ivHex = Array.from(iv)
            .map(b => b.toString(16).padStart(2, '0'))
            .join('');

        return {
            file: encryptedFile,
            key: keyHex,
            iv: ivHex
        };
    } catch (error) {
        console.error('Encryption error:', error);
        throw new Error('Failed to encrypt file: ' + error.message);
    }
}

        // DOM element references
        const fileInput = document.getElementById('fileInput');
        const uploadButton = document.getElementById('uploadButton');
        const progressContainer = document.getElementById('progressContainer');
        const progressBar = document.getElementById('progressBar');
        const progressText = document.getElementById('progressText');
        const progressDetail = document.getElementById('progressDetail');
        const resultMessage = document.getElementById('resultMessage');
        const uploadSuccess = document.getElementById('uploadSuccess');
        const downloadLink = document.getElementById('downloadLink');

        async function getMaxFileSize() {
            try {
                const response = await fetch('/get-max-file-size');
                const data = await response.json();
                return data.maxSize;
            } catch (error) {
                console.error('Error getting max file size:', error);
                return null;
            }
        }

        async function uploadFile() {
    const file = fileInput.files[0];
    if (!file) {
        alert('Please select a file first!');
        return;
    }

    // Check file size
    const maxSize = await getMaxFileSize();
    if (maxSize && file.size > maxSize) {
        const maxSizeMB = (maxSize / (1024 * 1024)).toFixed(2);
        resultMessage.textContent = `File size exceeds the limit of ${maxSizeMB} MB`;
        return;
    }

    try {
        progressContainer.style.display = 'block';
        uploadButton.disabled = true;
        uploadSuccess.style.display = 'none';
        resultMessage.textContent = '';

        // Preparation stage
        updateStage('Prep');
        progressBar.style.width = '0%';
        progressText.textContent = '0%';
        progressDetail.textContent = `Preparing to process ${formatBytes(file.size)}...`;
        progressStatus.textContent = 'Getting ready...';

        // Encrypt the file
        const { file: encryptedFile, key, iv } = await encryptFile(file);
        
        // Upload stage
        updateStage('Upload');
        progressBar.style.width = '25%';
        progressText.textContent = '25%';
        progressDetail.textContent = 'Starting upload...';
        progressStatus.textContent = 'Uploading to server...';

        const formData = new FormData();
        formData.append('file', encryptedFile);
        formData.append('originalName', file.name);

        // Upload the encrypted file
        const xhr = new XMLHttpRequest();
        xhr.open('POST', '/upload', true);

        xhr.upload.onprogress = (event) => {
            if (event.lengthComputable) {
                const uploadProgress = 25 + ((event.loaded / event.total) * 50); // Scale from 25% to 75%
                progressBar.style.width = uploadProgress + '%';
                progressText.textContent = Math.round(uploadProgress) + '%';
                progressDetail.textContent = `Uploading: ${formatBytes(event.loaded)} / ${formatBytes(event.total)}`;
            }
        };

        xhr.onload = () => {
            try {
                const response = JSON.parse(xhr.responseText);
                
                if (xhr.status === 200 && response.success) {
                    // Process stage
                    updateStage('Process');
                    progressBar.style.width = '90%';
                    progressText.textContent = '90%';
                    progressDetail.textContent = 'Finalizing...';
                    progressStatus.textContent = 'Almost done...';

                    // Complete stage
                    setTimeout(() => {
                        updateStage('Complete');
                        progressBar.style.width = '100%';
                        progressText.textContent = '100%';
                        progressDetail.textContent = 'Upload complete!';
                        progressStatus.textContent = 'Ready to share';

                        // Show success message
                        const fullUrl = `${window.location.origin}${response.downloadLink}#key=${key}&iv=${iv}`;
                        downloadLink.href = fullUrl;
                        downloadLink.textContent = fullUrl;
                        uploadSuccess.style.display = 'block';
                        resultMessage.textContent = '';

                        // Hide progress after a short delay
                        setTimeout(() => {
                            progressContainer.style.display = 'none';
                        }, 1000);
                    }, 500);
                } else {
                    throw new Error(response.message || 'Upload failed');
                }
            } catch (e) {
                resultMessage.textContent = e.message || 'Upload failed. Please try again.';
                uploadSuccess.style.display = 'none';
                progressContainer.style.display = 'none';
            }
            
            uploadButton.disabled = false;
        };

        xhr.onerror = () => {
            progressContainer.style.display = 'none';
            uploadSuccess.style.display = 'none';
            resultMessage.textContent = 'Upload failed. Please check your connection.';
            uploadButton.disabled = false;
        };

        xhr.send(formData);
    } catch (error) {
        console.error('Upload error:', error);
        progressContainer.style.display = 'none';
        uploadSuccess.style.display = 'none';
        resultMessage.textContent = error.message || 'Error processing file. Please try again.';
        uploadButton.disabled = false;
    }
}

    // Check file size
    const maxSize = await getMaxFileSize();
    if (maxSize && file.size > maxSize) {
        const maxSizeMB = (maxSize / (1024 * 1024)).toFixed(2);
        resultMessage.textContent = `File size exceeds the limit of ${maxSizeMB} MB`;
        return;
    }

    try {
        progressContainer.style.display = 'block';
        uploadButton.disabled = true;
        uploadSuccess.style.display = 'none';
        resultMessage.textContent = '';
        
        progressBar.style.width = '0%';
        progressText.textContent = '0%';
        progressDetail.textContent = `Preparing to process ${formatBytes(file.size)}...`;

        // Encrypt the file
        const { file: encryptedFile, key, iv } = await encryptFile(file);
        
        // Update progress for encryption completion
        progressBar.style.width = '50%';
        progressText.textContent = '50%';
        progressDetail.textContent = 'Starting upload...';

        const formData = new FormData();
        formData.append('file', encryptedFile);
        formData.append('originalName', file.name);

        // Upload the encrypted file
        const xhr = new XMLHttpRequest();
        xhr.open('POST', '/upload', true);

        xhr.upload.onprogress = (event) => {
            if (event.lengthComputable) {
                const uploadProgress = 50 + ((event.loaded / event.total) * 50);
                progressBar.style.width = uploadProgress + '%';
                progressText.textContent = Math.round(uploadProgress) + '%';
                progressDetail.textContent = `Uploading: ${formatBytes(event.loaded)} / ${formatBytes(event.total)}`;
            }
        };

        xhr.onload = () => {
            try {
                const response = JSON.parse(xhr.responseText);
                
                if (xhr.status === 200 && response.success) {
                    progressContainer.style.display = 'none';
                    const fullUrl = `${window.location.origin}${response.downloadLink}#key=${key}&iv=${iv}`;
                    downloadLink.href = fullUrl;
                    downloadLink.textContent = fullUrl;
                    uploadSuccess.style.display = 'block';
                    resultMessage.textContent = '';
                } else {
                    throw new Error(response.message || 'Upload failed');
                }
            } catch (e) {
                resultMessage.textContent = e.message || 'Upload failed. Please try again.';
                uploadSuccess.style.display = 'none';
            }
            
            progressContainer.style.display = 'none';
            uploadButton.disabled = false;
        };

        xhr.onerror = () => {
            progressContainer.style.display = 'none';
            uploadSuccess.style.display = 'none';
            resultMessage.textContent = 'Upload failed. Please check your connection.';
            uploadButton.disabled = false;
        };

        xhr.send(formData);
    } catch (error) {
        console.error('Upload error:', error);
        progressContainer.style.display = 'none';
        uploadSuccess.style.display = 'none';
        resultMessage.textContent = error.message || 'Error processing file. Please try again.';
        uploadButton.disabled = false;
    }
}

        function copyLink() {
            const linkText = downloadLink.href;
            navigator.clipboard.writeText(linkText).then(() => {
                const copyButton = document.getElementById('copyButton');
                copyButton.textContent = 'copied!';
                setTimeout(() => {
                    copyButton.textContent = 'copy';
                }, 2000);
            }).catch(err => {
                console.error('Failed to copy link: ', err);
            });
        }

        fileInput.addEventListener('change', () => {
            progressContainer.style.display = 'none';
            progressBar.style.width = '0%';
            progressText.textContent = '0%';
            progressDetail.textContent = '';
            uploadSuccess.style.display = 'none';
            resultMessage.textContent = '';
            uploadButton.disabled = false;
        });
    </script>

    <style>
        .progress-detail {
            margin-top: 0.5rem;
            font-size: 0.8rem;
            color: #666;
            text-align: center;
        }
    </style>

    <div class="footer">
        <a href="/about">about us</a>
    </div>
</body>
</html>

================
File: public/login.ejs
================
<!DOCTYPE html>
<html lang="en" data-theme="<%= theme %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - upfile.1</title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <a href="/" class="logo">upfile.1</a>
    <div class="auth-links">
        <a href="/register">register</a> | <a href="/login">login</a>
    </div>
    
    <div class="container">
        <form action="/login" method="POST" class="auth-form">
            <h2>Login</h2>
            <div class="form-group">
                <label for="username">username:</label>
                <input type="text" id="username" name="username" required>
            </div>
            <div class="form-group">
                <label for="password">password:</label>
                <input type="password" id="password" name="password" required>
            </div>
            <button type="submit">login</button>
        </form>
    </div>
    <div class="footer">
        <a href="/about">about us</a>
    </div>
</body>
</html>

================
File: public/profile.ejs
================
<!DOCTYPE html>
<html lang="en" data-theme="<%= theme %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile - upfile.1</title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <a href="/" class="logo">upfile.1</a>
    <div class="auth-links">
        <a href="/logout">logout</a>
    </div>
    
    <div class="container">
        <div class="profile-info">
            <h2>Profile</h2>
            <div class="info-row">
                
                <span class="label">username:</span>
                <span class="value"><%= user.username %></span>
            </div>
            <div class="info-row">
                <span class="label">email:</span>
                <span class="value"><%= user.email %></span>
            </div>
            <div class="info-row">
                <span class="label">joined:</span>
                <span class="value"><%= user.createdAt.toLocaleDateString() %></span>
            </div>
        </div>
    </div>
    <div class="uploaded-files-container">
        <h3>Your Uploaded Files</h3>
        <% if (user.uploadedFiles.length > 0) { %>
            <ul class="uploaded-files-list">
                <% user.uploadedFiles.forEach(file => { %>
                    <li class="uploaded-file-item">
                        <span class="file-name"><%= file.fileName %></span>
                        <span class="upload-date">Uploaded on <%= file.uploadDate.toLocaleDateString() %></span>
                        <form action="/delete-upload/<%= file.fileId %>" method="POST" class="delete-form">
                            <button type="submit" class="delete-button">Remove</button>
                        </form>
                    </li>
                <% }) %>
            </ul>
        <% } else { %>
            <p class="no-uploads">No uploaded files.</p>
        <% } %>
    </div>
    <% /* %>
    <div class="downloaded-files-container">
        <h3>Your Downloaded Files</h3>
        <% if (user.downloadedFiles.length > 0) { %>
            <ul class="downloaded-files-list">
                <% user.downloadedFiles.forEach(file => { %>
                    <li class="downloaded-file-item">
                        <span class="file-name"><%= file.fileName %></span>
                        <span class="download-date">Downloaded on <%= file.downloadDate.toLocaleDateString() %></span>
                        <form action="/delete-download/<%= file.fileId %>" method="POST" class="delete-form">
                            <button type="submit" class="delete-button">Remove</button>
                        </form>
                    </li>
                <% }) %>
            </ul>
        <% } else { %>
            <p class="no-downloads">No downloaded files.</p>
        <% } %>
    </div>
    <% */ %>
    <% if (user.isAdmin) { %>
        <div class="admin-section">
            <div class="admin-link">
                <a href="/admin-settings">admin settings</a>
            </div>
        </div>
    <% } %>
    <% if (!user.isAdmin) { %>
        <div class="footer">
            <a href="/about">about us</a>
        </div>
    <% } %>
</body>
</html>

================
File: public/register.ejs
================
<!DOCTYPE html>
<html lang="en" data-theme="<%= theme %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register - upfile.1</title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <a href="/" class="logo">upfile.1</a>
    <div class="auth-links">
        <a href="/register">register</a> | <a href="/login">login</a>
    </div>
    
    <div class="container">
        <form action="/register" method="POST" class="auth-form">
            <h2>Register</h2>
            <div class="form-group">
                <label for="username">username:</label>
                <input type="text" id="username" name="username" required>
            </div>
            <div class="form-group">
                <label for="email">email:</label>
                <input type="email" id="email" name="email" required>
            </div>
            <div class="form-group">
                <label for="password">password:</label>
                <input type="password" id="password" name="password" required>
            </div>
            <button type="submit">register</button>
        </form>
    </div>
    <div class="footer">
        <a href="/about">about us</a>
    </div>
</body>
</html>

================
File: public/style.css
================
/**
 * Main CSS Stylesheet
 * 
 * This stylesheet contains all styles for the file sharing application,
 * including theme support, layout components, and interactive elements.
 */

/* ==========================================================================
   Theme Variables
   ========================================================================== */

   :root {
    /* Light theme default variables */
    --bg-color: #ffffff;
    --text-color: #1a1a1a;
    --border-color: #1a1a1a;
    --hover-bg: #333;
    --input-bg: #ffffff;
    --container-bg: #f9f9f9;
    --link-bg: #f5f5f5;
}

[data-theme="dark"] {
    /* Dark theme overrides */
    --bg-color: #1a1a1a;
    --text-color: #ffffff;
    --border-color: #ffffff;
    --hover-bg: #333;
    --input-bg: #2d2d2d;
    --container-bg: #2d2d2d;
    --link-bg: #2d2d2d;
}

/* ==========================================================================
   Base Styles & Reset
   ========================================================================== */

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Courier New', monospace;
}

body {
    min-height: 100vh;
    background-color: var(--bg-color);
    color: var(--text-color);
    display: flex;
    flex-direction: column;
    padding: 2rem;
    transition: background-color 0.3s, color 0.3s;
}

/* ==========================================================================
   Layout Components
   ========================================================================== */

/* Main Container */
.container {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    max-width: 600px;
    margin: 0 auto;
    padding: 2rem;
}

/* Header Elements */
.logo {
    position: fixed;
    top: 2rem;
    left: 2rem;
    font-size: 1.2rem;
    font-weight: bold;
    color: var(--text-color);
    text-decoration: none;
    transition: color 0.3s;
}

.logo:hover {
    text-decoration: underline;
}

/* Authentication Links */
.auth-links {
    position: fixed;
    top: 2rem;
    right: 2rem;
    font-size: 1rem;
}

.auth-links a {
    color: var(--text-color) !important;
    text-decoration: none;
    font-family: 'Courier New', monospace;
    transition: color 0.3s;
}

.auth-links a:hover {
    text-decoration: underline;
}

/* Footer */
.footer {
    position: fixed;
    bottom: 2rem;
    left: 0;
    right: 0;
    text-align: center;
    font-size: 1rem;
}

.footer a {
    color: var(--text-color) !important;
    text-decoration: none;
    font-family: 'Courier New', monospace;
    transition: color 0.3s;
}

.footer a:hover {
    text-decoration: underline;
}

/* ==========================================================================
   Form Elements
   ========================================================================== */

/* Upload Form */
.upload-form {
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

/* Profile Information */
.profile-info {
    width: 100%;
    max-width: 600px;
    margin: 0 auto;  /* Centers the profile info */
}

.info-row {
    display: flex;
    margin-bottom: 1rem;
    font-size: 0.9rem;
    align-items: baseline;
}

.info-row .label {
    min-width: 4rem;
    color: #666;
    margin-right: 1rem;  /* Adds spacing between label and value */
}

.info-row .value {
    word-break: break-all;
    color: var(--text-color);
}

/* Input Fields */
input[type="file"],
input[type="text"],
input[type="email"],
input[type="password"],
input[type="number"],
select {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    font-size: 0.9rem;
    background-color: var(--input-bg);
    color: var(--text-color);
}

/* Buttons */
button {
    background-color: var(--text-color);
    color: var(--bg-color);
    border: none;
    padding: 0.8rem 1.5rem;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.9rem;
    transition: background-color 0.2s;
}

button:hover {
    background-color: var(--text-color);
    color: var(--bg-color);
}

button:disabled {
    background-color: var(--text-color);
    color: var(--bg-color);
}

/* Delete Button */
.delete-button {
    background-color: #ff4d4d;
    color: #fff;
    padding: 0.4rem 0.8rem;
    font-size: 0.9rem;
    transition: background-color 0.2s;
}

.delete-button:hover {
    background-color: #ff3333;
}

/* ==========================================================================
   Progress Elements
   ========================================================================== */

.progress-container {
    width: 100%;
    margin: 1rem 0;
}

.progress {
    width: 100%;
    height: 4px;
    background-color: #eee;
    border-radius: 2px;
    overflow: hidden;
}

.progress-bar {
    height: 100%;
    background-color: var(--text-color);
    transition: width 0.3s ease;
}

.progress-text {
    margin-top: 0.5rem;
    font-size: 0.9rem;
    text-align: center;
}

/* ==========================================================================
   File Display Components
   ========================================================================== */

/* Link Container */
.link-container {
    display: flex;
    gap: 0.5rem;
    margin-top: 1rem;
    padding: 1rem;
    background-color: var(--link-bg);
    border-radius: 4px;
    word-break: break-all;
}

.link-container a {
    flex: 1;
    color: var(--text-color);
    text-decoration: none;
    font-size: 0.9rem;
}

.link-container a:hover {
    text-decoration: underline;
}

/* Downloaded Files Container */
.downloaded-files-container,
.uploaded-files-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    max-width: 600px;
    margin: 2rem auto;
    padding: 1rem;
    background-color: var(--container-bg);
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.downloaded-files-list,
.uploaded-files-list {
    list-style-type: none;
    padding: 0;
    width: 100%;
}

.downloaded-file-item,
.uploaded-file-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 1rem;
    padding: 1rem;
    background-color: var(--input-bg);
    border: 1px solid var(--border-color);
    border-radius: 4px;
}

/* ==========================================================================
   Authentication Forms
   ========================================================================== */

.auth-form {
    width: 100%;
    max-width: 400px;
    padding: 2rem;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    color: var(--text-color);
}

.auth-form h2 {
    margin-bottom: 1.5rem;
    text-align: center;
    color: var(--text-color);
}

.form-group {
    margin-bottom: 1rem;
}

.form-group label {
    display: block;
    margin-bottom: 0.5rem;
    color: var(--text-color);
}

/* ==========================================================================
   Admin Styles
   ========================================================================== */

/* Admin Settings */
.admin-link {
    width: 100%;
    text-align: center;
    display: flex;
    justify-content: center;
    margin: 2rem auto;
}
.admin-link a,
.admin-link a:visited {
    color: var(--text-color) !important;
    text-decoration: none;
    transition: color 0.3s;
}

.admin-link a:hover {
    text-decoration: underline;
}

.settings-form {
    margin-top: 2rem;
    color: var(--text-color);
}

/* ==========================================================================
   Utility Classes
   ========================================================================== */

.file-name {
    font-weight: bold;
    font-size: 1rem;
    color: var(--text-color);
}

.download-date,
.upload-date {
    font-size: 0.9rem;
    color: #666;
    margin-top: 0.5rem;
}

.no-downloads,
.no-uploads {
    font-size: 1rem;
    color: #888;
    margin-top: 1rem;
}

#resultMessage {
    color: #ff0000;
    margin: 1rem 0;
    text-align: center;
    font-weight: bold;
}

#uploadSuccess {
    margin-top: 1rem;
}

/* Add this to public/style.css */

/* The main progress container */
.progress-container {
    width: 100%;
    max-width: 400px;
    margin: 2rem auto;
    background-color: var(--input-bg);
    padding: 1.5rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* The stage list above the progress bar */
.progress-stages {
    display: flex;
    justify-content: space-between;
    margin-bottom: 1.5rem;
    position: relative;
}

/* The line connecting all stages */
.stage-line {
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    height: 2px;
    background-color: var(--border-color);
    z-index: 1;
}

/* Individual stage dots */
.progress-stage {
    position: relative;
    z-index: 2;
    text-align: center;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
}

/* The dot in each stage */
.stage-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background-color: var(--bg-color);
    border: 2px solid var(--border-color);
    transition: all 0.3s ease;
}

/* Active stage dot */
.progress-stage.active .stage-dot {
    background-color: var(--text-color);
    border-color: var(--text-color);
}

/* Completed stage dot */
.progress-stage.completed .stage-dot {
    background-color: var(--text-color);
    border-color: var(--text-color);
}

/* Stage label text */
.stage-label {
    font-size: 0.8rem;
    color: var(--text-color);
}

/* The actual progress bar */
.progress {
    width: 100%;
    height: 4px;
    background-color: var(--border-color);
    border-radius: 2px;
    overflow: hidden;
    margin: 1rem 0;
}

/* The moving part of the progress bar */
.progress-bar {
    height: 100%;
    background-color: var(--text-color);
    transition: width 0.3s ease;
}

/* Progress text and details */
.progress-stats {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
}

.progress-text {
    font-size: 0.9rem;
    font-weight: bold;
}

.progress-detail {
    font-size: 0.8rem;
    color: #666;
}

/* Current status text */
.progress-status {
    text-align: center;
    margin-top: 0.5rem;
    font-size: 0.9rem;
    color: #666;
}

================
File: public/test-throttling.ejs
================
<!-- Create views/test-throttling.ejs -->
<!DOCTYPE html>
<html>
<head>
    <title>Throttling Test</title>
    <script>
    async function testDownload() {
        const startTime = Date.now();
        const response = await fetch('/download/your-test-file-id/download');
        const reader = response.body.getReader();
        let receivedLength = 0;

        while(true) {
            const {done, value} = await reader.read();
            if (done) break;
            receivedLength += value.length;
            
            const elapsedSeconds = (Date.now() - startTime) / 1000;
            const speedMBps = (receivedLength / (1024 * 1024)) / elapsedSeconds;
            
            document.getElementById('stats').textContent = 
                `Downloaded: ${(receivedLength / (1024 * 1024)).toFixed(2)} MB
                 Speed: ${speedMBps.toFixed(2)} MB/s
                 Time: ${elapsedSeconds.toFixed(1)} seconds`;
        }
    }
    </script>
</head>
<body>
    <button onclick="testDownload()">Start Test Download</button>
    <pre id="stats"></pre>
</body>
</html>

================
File: .gitignore
================
# Dependencies
node_modules/
package-lock.json

# Upload directories
uploads/*
!uploads/.gitkeep

# Environment variables
.env
.env.local
.env.*.local

# Log files
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids/
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov/

# Coverage directory used by tools like istanbul
coverage/

# Temporary files
*.tmp
*.temp
.DS_Store
Thumbs.db

# IDE specific files
.idea/
.vscode/
*.swp
*.swo
*.swn
*.bak

# Build directory
dist/
build/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# Compressed files
*.zip
*.rar
*.7z
*.gz
*.zst

================
File: package.json
================
{
  "name": "upfile",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "bcrypt": "^5.1.1",
    "body-parser": "^1.20.3",
    "crypto": "^1.0.1",
    "ejs": "^3.1.10",
    "express": "^4.21.1",
    "express-session": "^1.18.1",
    "fs": "^0.0.1-security",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.7.2",
    "multer": "^1.4.5-lts.1",
    "path": "^0.12.7"
  }
}

================
File: server.js
================
const express = require('express');
const fs = require('fs');
const crypto = require('crypto');
const path = require('path');
const multer = require('multer');
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
const session = require('express-session');
const bodyParser = require('body-parser');
const stream = require('stream');
const util = require('util');


const app = express();
const port = 3000;

app.use(bodyParser.json({limit: '10gb'}));
app.use(bodyParser.urlencoded({limit: '10gb', extended: true}));


mongoose.connect('mongodb://localhost:27017/upfile', {
    maxPoolSize: 100,
    minPoolSize: 10,
    maxIdleTimeMS: 30000,
    connectTimeoutMS: 30000,
    socketTimeoutMS: 360000, // Increased timeout for large file operations
    serverSelectionTimeoutMS: 5000,
    heartbeatFrequencyMS: 10000
}).then(() => {
    console.log('Connected to MongoDB successfully');
}).catch(err => {
    console.error('MongoDB connection error:', err);
});

// Add error handlers for MongoDB connection
mongoose.connection.on('error', err => {
    console.error('MongoDB connection error:', err);
});

mongoose.connection.on('disconnected', () => {
    console.log('MongoDB disconnected');
});

mongoose.connection.on('reconnected', () => {
    console.log('MongoDB reconnected');
});

const userSchema = new mongoose.Schema({
    // Existing fields
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    isAdmin: { type: Boolean, default: false },
    createdAt: { type: Date, default: Date.now },

    // Fields for tracking files
    downloadedFiles: [
        {
            fileId: String,
            fileName: String,
            downloadDate: { type: Date, default: Date.now }
        }
    ],
    uploadedFiles: [
        {
            fileId: String,
            fileName: String,
            uploadDate: { type: Date, default: Date.now }
        }
    ]
});

const bannedIPSchema = new mongoose.Schema({
    ip: { type: String, required: true },
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    reason: String,
    bannedAt: { type: Date, default: Date.now }
});

const BannedIP = mongoose.model('BannedIP', bannedIPSchema);

const User = mongoose.model('User', userSchema);

const settingsSchema = new mongoose.Schema({
    maxUploadSize: { type: Number, default: 100 * 1024 * 1024 },
    maxDownloadSize: { type: Number, default: 2 * 1024 * 1024 * 1024 },
    throttleSpeed: { type: Number, default: 2 * 1024 * 1024 },
    defaultTheme: { type: String, default: 'light', enum: ['light', 'dark'] },
    encryptionEnabled: { type: Boolean, default: true }, // Add this line
    lastUpdated: { type: Date, default: Date.now }
});

const Settings = mongoose.model('Settings', settingsSchema);

// Initialize default settings
async function initializeSettings() {
    try {
        const settings = await Settings.findOne();
        if (!settings) {
            await new Settings({}).save();
        }
    } catch (error) {
        console.error('Error initializing settings:', error);
    }
}
initializeSettings();

const downloadTrackingSchema = new mongoose.Schema({
    ip: { type: String, required: true },
    bytesDownloaded: { type: Number, default: 0 },
    lastReset: { type: Date, default: Date.now }
});

const DownloadTracking = mongoose.model('DownloadTracking', downloadTrackingSchema);

// Add this after the Settings model definition
const getFileSize = async () => {
    const settings = await Settings.findOne();
    return settings ? settings.maxUploadSize : 100 * 1024 * 1024; // Default 100MB if no settings
};

// Middleware
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'public'));
app.use(express.static('public'));
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.use(session({
    secret: 'your-secret-key',
    resave: false,
    saveUninitialized: false,
    cookie: {
        secure: false, // Set to true if using HTTPS
        maxAge: 7 * 24 * 60 * 60 * 1000 // 1 week in milliseconds
    }
}));

app.use(async (req, res, next) => {
    const ip = req.ip;
    const banned = await BannedIP.findOne({ ip });
    if (banned) {
        return res.status(403).send('Access Denied: Your IP has been banned.');
    }
    next();
});

// Add this near your other middleware functions
function createThrottledStream(readStream, speedBytesPerSecond) {
    let bytesTransferred = 0;
    let lastTime = Date.now();
    
    const throttle = new stream.Transform({
        transform(chunk, encoding, callback) {
            const now = Date.now();
            const elapsedMs = now - lastTime;
            bytesTransferred += chunk.length;

            // Calculate how many bytes we should have sent by now
            const expectedBytes = (elapsedMs / 1000) * speedBytesPerSecond;

            if (bytesTransferred > expectedBytes) {
                // If we've sent too many bytes, calculate delay needed
                const excessBytes = bytesTransferred - expectedBytes;
                const requiredDelay = (excessBytes / speedBytesPerSecond) * 1000;

                setTimeout(() => {
                    this.push(chunk);
                    callback();
                }, requiredDelay);
            } else {
                // If we're under the limit, send immediately
                this.push(chunk);
                callback();
            }
        }
    });

    // Handle errors
    readStream.on('error', (err) => {
        console.error('Read stream error:', err);
        throttle.destroy(err);
    });

    throttle.on('error', (err) => {
        console.error('Throttle stream error:', err);
    });

    readStream.pipe(throttle);
    return throttle;
}

app.use((req, res, next) => {
    res.locals.session = req.session;
    next();
});


// Dark Theme
app.use(async (req, res, next) => {
    try {
        const settings = await Settings.findOne();
        res.locals.theme = settings ? settings.defaultTheme : 'light';
        next();
    } catch (error) {
        console.error('Error loading theme:', error);
        res.locals.theme = 'light';
        next();
    }
});

const trackDownload = async (req, res, next) => {
    try {
        const ip = req.ip;
        const settings = await Settings.findOne();
        const maxDownloadSize = settings ? settings.maxDownloadSize : 2 * 1024 * 1024 * 1024;

        let tracking = await DownloadTracking.findOne({ ip });

        if (!tracking || (Date.now() - tracking.lastReset > 24 * 60 * 60 * 1000)) {
            tracking = new DownloadTracking({ ip, bytesDownloaded: 0, lastReset: new Date() });
        }

        // Update user’s downloaded files if authenticated
        if (req.session.userId) {
            const user = await User.findById(req.session.userId);
            user.downloadedFiles.push({
                fileId: req.params.id, // fileId from route parameter
                fileName: fileInfo.fileName // Retrieved from fileLinks object
            });
            await user.save();
        }

        req.downloadTracking = tracking;
        next();
    } catch (error) {
        console.error('Download tracking error:', error);
        next(error);
    }
};



// Multer configuration
const storage = multer.diskStorage({
    destination: './uploads/',
    filename: (req, file, cb) => {
        const uniqueSuffix = crypto.randomBytes(8).toString('hex');
        cb(null, uniqueSuffix + path.extname(file.originalname));
    }
});

const upload = multer({
    storage: storage,
    limits: {
        fileSize: 1024 * 1024 * 1024 * 2 // 2GB limit
    },
    fileFilter: async (req, file, cb) => {
        try {
            const maxSize = await getFileSize();
            const fileSize = parseInt(req.headers['content-length']);
            if (fileSize > maxSize) {
                return cb(new Error('File size exceeds the limit'));
            }
            cb(null, true);
        } catch (error) {
            cb(error);
        }
    }
});

const fileLinks = {};

const requireAdmin = async (req, res, next) => {
    if (!req.session.userId) {
        return res.redirect('/login');
    }
    const user = await User.findById(req.session.userId);
    if (!user || !user.isAdmin) {
        return res.redirect('/profile');
    }
    next();
};

// Authentication middleware
const requireAuth = (req, res, next) => {
    if (!req.session.userId) {
        return res.redirect('/login');
    }
    next();
};

// Routes
app.get('/', (req, res) => {
    res.render('index');  // Instead of res.sendFile()
});

app.get('/check-download-status', (async (req, res, next) => {
        try {
            const ip = req.ip;
            const settings = await Settings.findOne();
            const maxDownloadSize = settings ? settings.maxDownloadSize : 2 * 1024 * 1024 * 1024;

            let tracking = await DownloadTracking.findOne({ ip });

            if (!tracking || (Date.now() - tracking.lastReset > 24 * 60 * 60 * 1000)) {
                tracking = new DownloadTracking({ ip, bytesDownloaded: 0, lastReset: new Date() });
            }

            // Save download to user's downloaded files if logged in
            if (req.session.userId && req.params.id) {
                const user = await User.findById(req.session.userId);
                const fileInfo = fileLinks[req.params.id];

                // Check if file exists in fileLinks and then push download record
                if (fileInfo) {
                    user.downloadedFiles.push({
                        fileId: req.params.id,
                        fileName: fileInfo.fileName
                    });
                    await user.save();
                }
            }

            req.downloadTracking = tracking;
            next();
        } catch (error) {
            console.error('Download tracking error:', error);
            next(error);
        }
    }), async (req, res) => {
    try {
        const tracking = req.downloadTracking;
        const settings = await Settings.findOne();
        
        res.json({
            willBeThrottled: tracking.bytesDownloaded > settings.maxDownloadSize,
            throttleSpeed: Math.floor(settings.throttleSpeed / (1024 * 1024)) // Convert to MB/s
        });
    } catch (error) {
        console.error('Error checking download status:', error);
        res.status(500).json({ error: 'Error checking download status' });
    }
});

app.get('/admin-settings', requireAdmin, async (req, res) => {
    try {
        const settings = await Settings.findOne();
        const users = await User.find({}).sort({ createdAt: -1 });
        const user = await User.findById(req.session.userId);
        
        res.render('admin-settings', { 
            user,
            users,
            settings: settings || { 
                maxUploadSize: 100 * 1024 * 1024, 
                maxDownloadSize: 2 * 1024 * 1024 * 1024,
                throttleSpeed: 2 * 1024 * 1024,
                defaultTheme: 'light',
                encryptionEnabled: true,
                lastUpdated: new Date()
            }
        });
    } catch (error) {
        console.error('Admin settings error:', error);
        res.redirect('/profile');
    }
});

app.post('/admin-settings/general', requireAdmin, async (req, res) => {
    try {
        const maxUploadSize = parseInt(req.body.maxUploadSize);
        const maxDownloadSize = parseInt(req.body.maxDownloadSize);
        const throttleSpeed = parseFloat(req.body.throttleSpeed);
        const encryptionEnabled = req.body.encryptionEnabled === 'true';
        
        // Convert all values to bytes
        const settings = {
            maxUploadSize: maxUploadSize * 1024 * 1024, // MB to bytes
            maxDownloadSize: maxDownloadSize * 1024 * 1024 * 1024, // GB to bytes
            throttleSpeed: Math.floor(throttleSpeed * 1024 * 1024), // MB/s to bytes/s
            encryptionEnabled: encryptionEnabled,
            lastUpdated: new Date()
        };

        await Settings.findOneAndUpdate({}, settings, { upsert: true });
        
        // Log the new settings
        console.log('Updated throttle settings:');
        console.log('- Max upload size:', settings.maxUploadSize, 'bytes');
        console.log('- Max download size:', settings.maxDownloadSize, 'bytes');
        console.log('- Throttle speed:', settings.throttleSpeed, 'bytes/second');
        
        res.redirect('/admin-settings');
    } catch (error) {
        console.error('Settings update error:', error);
        res.redirect('/admin-settings');
    }
});

// User details route
app.get('/admin/user/:userId', requireAdmin, async (req, res) => {
    try {
        const userData = await User.findById(req.params.userId);
        if (!userData) {
            return res.status(404).send('User not found');
        }

        // Calculate total storage used
        let totalStorageUsed = 0;
        for (const file of userData.uploadedFiles) {
            const filePath = fileLinks[file.fileId]?.filePath;
            if (filePath && fs.existsSync(filePath)) {
                const stats = fs.statSync(filePath);
                totalStorageUsed += stats.size;
            }
        }

        // Helper function to format bytes
        const formatBytes = (bytes) => {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        };

        res.render('admin-user-details', { 
            userData, 
            totalStorageUsed,
            formatBytes
        });
    } catch (error) {
        console.error('Error fetching user details:', error);
        res.redirect('/admin-settings');
    }
});

// Ban user route
app.post('/admin/user/:userId/ban', requireAdmin, async (req, res) => {
    try {
        const user = await User.findById(req.params.userId);
        if (!user) {
            return res.status(404).send('User not found');
        }

        // Get the user's last known IP (you'll need to track this when users log in)
        const lastIP = user.lastKnownIP || req.ip;

        // Create ban record
        const ban = new BannedIP({
            ip: lastIP,
            userId: user._id,
            reason: req.body.banReason
        });
        await ban.save();

        // Optionally disable the user account
        user.isBanned = true;
        await user.save();

        res.redirect('/admin-settings');
    } catch (error) {
        console.error('Error banning user:', error);
        res.redirect(`/admin/user/${req.params.userId}`);
    }
});

// Delete file route
app.post('/admin/file/:fileId/delete', requireAdmin, async (req, res) => {
    try {
        const fileId = req.params.fileId;
        const filePath = fileLinks[fileId]?.filePath;
        
        if (filePath) {
            // Delete the physical file
            fs.unlink(filePath, (err) => {
                if (err) {
                    console.error('Error deleting file from server:', err);
                }
            });
            
            // Remove from fileLinks
            delete fileLinks[fileId];
            
            // Remove from all users' uploaded files
            await User.updateMany(
                { 'uploadedFiles.fileId': fileId },
                { $pull: { uploadedFiles: { fileId: fileId } } }
            );
        }
        
        // Redirect back to the user details page
        res.redirect(req.headers.referer || '/admin-settings');
    } catch (error) {
        console.error('Error deleting file:', error);
        res.redirect('/admin-settings');
    }
});

// Add this temporary route to server.js for testing
app.get('/generate-test-file', async (req, res) => {
    const filePath = path.join(__dirname, 'uploads', 'test-large-file');
    const fileSize = 100 * 1024 * 1024; // 100MB
    
    await new Promise((resolve, reject) => {
        const writeStream = fs.createWriteStream(filePath);
        let bytesWritten = 0;
        
        function writeChunk() {
            const chunkSize = 1024 * 1024; // 1MB chunks
            const buffer = Buffer.alloc(chunkSize, 'x');
            
            if (bytesWritten < fileSize) {
                writeStream.write(buffer);
                bytesWritten += chunkSize;
                setImmediate(writeChunk);
            } else {
                writeStream.end();
                resolve();
            }
        }
        
        writeChunk();
    });
    
    res.send('Test file generated');
});

// Add this to server.js to help with testing
app.get('/test-throttling', (req, res) => {
    res.render('test-throttling');
});

// Add to server.js
app.get('/test-throttling-setup', async (req, res) => {
    try {
        // Generate a 100MB test file
        const testFilePath = path.join(__dirname, 'uploads', 'throttle-test-file');
        const fileSize = 100 * 1024 * 1024; // 100MB
        
        // Generate file if it doesn't exist
        if (!fs.existsSync(testFilePath)) {
            const writeStream = fs.createWriteStream(testFilePath);
            const buffer = Buffer.alloc(1024 * 1024, 'x'); // 1MB chunk
            
            for(let i = 0; i < 100; i++) { // Write 100 chunks of 1MB
                writeStream.write(buffer);
            }
            writeStream.end();
        }

        // Create a download link
        const downloadId = crypto.randomBytes(8).toString('hex');
        fileLinks[downloadId] = {
            filePath: testFilePath,
            fileName: 'throttle-test-file'
        };

        res.send(`
            <h1>Throttling Test</h1>
            <p>Test file created (100MB)</p>
            <p>Download ID: ${downloadId}</p>
            <p><a href="/download/${downloadId}">Download Link</a></p>
            <p>Steps to test:</p>
            <ol>
                <li>Set throttle speed to 0.1 MB/s in admin settings</li>
                <li>Set download limit to 1 MB</li>
                <li>Open browser dev tools (Network tab)</li>
                <li>Click download link and monitor speed</li>
            </ol>
        `);
    } catch (error) {
        res.status(500).send('Error setting up test: ' + error.message);
    }
});

// Authentication routes
app.get('/register', (req, res) => {
    res.render('register');
});

app.post('/register', async (req, res) => {
    try {
        const userCount = await User.countDocuments();
        const hashedPassword = await bcrypt.hash(req.body.password, 10);
        const user = new User({
            username: req.body.username,
            password: hashedPassword,
            email: req.body.email,
            isAdmin: userCount === 0 // First user becomes admin
        });
        await user.save();
        res.redirect('/login');
    } catch (error) {
        console.error('Registration error:', error);
        res.redirect('/register');
    }
});

app.get('/login', (req, res) => {
    res.render('login');
});

app.post('/login', async (req, res) => {
    try {
        const user = await User.findOne({ username: req.body.username });
        if (user && await bcrypt.compare(req.body.password, user.password)) {
            req.session.userId = user._id;
            res.redirect('/profile');
        } else {
            res.redirect('/login');
        }
    } catch (error) {
        console.error('Login error:', error);
        res.redirect('/login');
    }
});

app.get('/profile', requireAuth, async (req, res) => {
    try {
        const user = await User.findById(req.session.userId);
        res.render('profile', { user });
    } catch (error) {
        console.error('Profile error:', error);
        res.redirect('/login');
    }
});

app.post('/delete-download/:fileId', requireAuth, async (req, res) => {
    try {
        const user = await User.findById(req.session.userId);
        user.downloadedFiles = user.downloadedFiles.filter(file => file.fileId !== req.params.fileId);
        await user.save();
        res.redirect('/profile');
    } catch (error) {
        console.error('Error deleting download:', error);
        res.status(500).send('Error deleting download.');
    }
});

app.post('/delete-upload/:fileId', requireAuth, async (req, res) => {
    try {
        const user = await User.findById(req.session.userId);
        const fileToDelete = user.uploadedFiles.find(file => file.fileId === req.params.fileId);

        if (fileToDelete) {
            // Remove the file from the filesystem
            const filePath = fileLinks[req.params.fileId]?.filePath;
            if (filePath) {
                fs.unlink(filePath, (err) => {
                    if (err) {
                        console.error('Error deleting file from server:', err);
                    } else {
                        console.log('File successfully deleted from server:', filePath);
                    }
                });
                
                // Remove file from fileLinks
                delete fileLinks[req.params.fileId];
            }

            // Remove the file from user's uploadedFiles array
            user.uploadedFiles = user.uploadedFiles.filter(file => file.fileId !== req.params.fileId);
            await user.save();
        }
        
        res.redirect('/profile');
    } catch (error) {
        console.error('Error deleting upload:', error);
        res.status(500).send('Error deleting upload.');
    }
});

app.get('/logout', (req, res) => {
    req.session.destroy((err) => {
        if (err) {
            console.error('Logout error:', err);
            res.redirect('/profile');
        } else {
            res.redirect('/');
        }
    });
});

// Add this with your other routes
app.get('/about', (req, res) => {
    res.render('about');
});

// Admin settings POST route
// Update the admin settings routes
app.post('/admin-settings/general', requireAdmin, async (req, res) => {
    try {
        const maxUploadSize = parseInt(req.body.maxUploadSize);
        const maxDownloadSize = parseInt(req.body.maxDownloadSize);
        const throttleSpeed = parseInt(req.body.throttleSpeed);
        const encryptionEnabled = req.body.encryptionEnabled === 'true';
        
        await Settings.findOneAndUpdate({}, {
            maxUploadSize: maxUploadSize * 1024 * 1024,
            maxDownloadSize: maxDownloadSize * 1024 * 1024 * 1024,
            throttleSpeed: throttleSpeed * 1024 * 1024,
            encryptionEnabled: encryptionEnabled,
            lastUpdated: new Date()
        }, { upsert: true });
        
        res.redirect('/admin-settings');
    } catch (error) {
        console.error('Settings update error:', error);
        res.redirect('/admin-settings');
    }
});

app.post('/admin-settings/display', requireAdmin, async (req, res) => {
    try {
        const { defaultTheme } = req.body;
        
        await Settings.findOneAndUpdate({}, {
            defaultTheme,
            lastUpdated: new Date()
        }, { upsert: true });
        
        res.redirect('/admin-settings');
    } catch (error) {
        console.error('Display settings update error:', error);
        res.redirect('/admin-settings');
    }
});

// File Size Check
app.get('/get-max-file-size', async (req, res) => {
    try {
        const settings = await Settings.findOne();
        const maxSize = settings ? settings.maxUploadSize : 100 * 1024 * 1024; // Default 100MB
        res.json({ maxSize });
    } catch (error) {
        console.error('Error getting max file size:', error);
        res.status(500).json({ 
            error: 'Server error',
            maxSize: 100 * 1024 * 1024 // Default fallback
        });
    }
});

// File upload routes
app.post('/upload', upload.single('file'), async (req, res) => {
    try {
        const settings = await Settings.findOne();
        const maxSize = await getFileSize();
        const fileSize = parseInt(req.headers['content-length']);

        if (fileSize > maxSize) {
            const maxSizeMB = (maxSize / (1024 * 1024)).toFixed(2);
            return res.status(400).json({
                success: false,
                message: `File size exceeds the limit of ${maxSizeMB} MB`
            });
        }

        if (!req.file) {
            return res.status(400).json({
                success: false,
                message: 'No file uploaded.'
            });
        }

        if (req.session.userId) {
            const user = await User.findById(req.session.userId);
            const downloadId = crypto.randomBytes(8).toString('hex');

            // Store whether the file is encrypted based on settings
            fileLinks[downloadId] = {
                filePath: req.file.path,
                fileName: req.body.originalName || req.file.originalname, // Use original name if provided
                encrypted: settings.encryptionEnabled
            };
            
            user.uploadedFiles.push({
                fileId: downloadId,
                fileName: req.body.originalName || req.file.originalname
            });
            await user.save();
            
            const downloadLink = `/download/${downloadId}`;
            return res.json({
                success: true,
                message: 'File uploaded successfully!',
                downloadLink,
                encrypted: settings.encryptionEnabled
            });
        } else {
            return res.status(403).json({ 
                success: false, 
                message: 'User not authenticated.' 
            });
        }
    } catch (error) {
        console.error('Upload error:', error);
        return res.status(500).json({
            success: false,
            message: 'Server error during upload.'
        });
    }
});



app.get('/download/:id', (req, res) => {
    const downloadId = req.params.id;
    const fileInfo = fileLinks[downloadId];
    
    if (!fileInfo) {
        return res.status(404).send('File not found.');
    }

    const fileSize = fs.statSync(fileInfo.filePath).size;
    const formattedSize = (fileSize / (1024 * 1024)).toFixed(2) + " MB";

    res.render('download', {
        fileName: fileInfo.fileName,
        fileSize: formattedSize,
        encrypted: fileInfo.encrypted // Pass encryption status to template
    });
});

// Update your download route
app.get('/download/:id/download', async (req, res, next) => {
    const downloadId = req.params.id;
    const fileInfo = fileLinks[downloadId];

    if (!fileInfo) {
        return res.status(404).send('File not found.');
    }

    try {
        const stats = fs.statSync(fileInfo.filePath);
        const settings = await Settings.findOne();
        const tracking = await DownloadTracking.findOne({ ip: req.ip });

        // Update bytes downloaded
        if (tracking) {
            tracking.bytesDownloaded += stats.size;
            await tracking.save();
        }

        // Set response headers
        res.setHeader('Content-Type', 'application/octet-stream');
        res.setHeader('Content-Disposition', `attachment; filename="${fileInfo.fileName}"`);
        res.setHeader('Content-Length', stats.size);
        res.setHeader('X-File-Encrypted', fileInfo.encrypted ? 'true' : 'false');

        // Create file stream
        const fileStream = fs.createReadStream(fileInfo.filePath);

        // Handle stream errors
        fileStream.on('error', (error) => {
            console.error('File stream error:', error);
            if (!res.headersSent) {
                res.status(500).send('Error streaming file');
            }
        });

        // Apply throttling if needed
        if (tracking && tracking.bytesDownloaded > settings.maxDownloadSize) {
            console.log('Throttling download to:', settings.throttleSpeed, 'bytes per second');
            const throttledStream = createThrottledStream(fileStream, settings.throttleSpeed);
            throttledStream.pipe(res);
        } else {
            fileStream.pipe(res);
        }

        // Handle client disconnect
        req.on('close', () => {
            fileStream.destroy();
        });

    } catch (error) {
        console.error('Download error:', error);
        if (!res.headersSent) {
            res.status(500).send('Error processing download.');
        }
    }
});

app.get('/check-throttle-status', async (req, res) => {
    try {
        const settings = await Settings.findOne();
        const tracking = await DownloadTracking.findOne({ ip: req.ip });
        
        res.json({
            currentDownloaded: tracking ? tracking.bytesDownloaded : 0,
            maxDownloadSize: settings.maxDownloadSize,
            throttleSpeed: settings.throttleSpeed,
            isThrottled: tracking ? tracking.bytesDownloaded > settings.maxDownloadSize : false,
            throttleSpeedMBps: (settings.throttleSpeed / (1024 * 1024)).toFixed(2)
        });
    } catch (error) {
        res.status(500).json({ error: 'Error checking throttle status' });
    }
});

// Error handling middleware
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).send('Something broke!');
});

// Start server
app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});
