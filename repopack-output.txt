This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-27T05:02:55.373Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
public/
  download.ejs
  index.html
  style.css
package.json
server.js

================================================================
Repository Files
================================================================

================
File: public/download.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Download - upfile.1</title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <div class="logo">upfile.1</div>
    
    <div class="container">
        <div class="download-info">
            <div class="info-row">
                <span class="label">file:</span>
                <span class="value"><%= fileName %></span>
            </div>
            <div class="info-row">
                <span class="label">size:</span>
                <span class="value"><%= fileSize %></span>
            </div>
        </div>
        <button onclick="startDownload()" class="download-button">download</button>
    </div>

    <script>
        function startDownload() {
            window.location.href = window.location.pathname + '/download';
        }
    </script>
</body>
</html>

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>upfile.1 - File Sharing</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="logo">upfile.1</div>
    
    <div class="container">
        <div class="upload-form">
            <input type="file" id="fileInput" name="file" required>
            <button id="uploadButton" onclick="uploadFile()">upload</button>
        </div>

        <!-- Progress bar container -->
        <div class="progress-container" id="progressContainer" style="display: none;">
            <div class="progress">
                <div class="progress-bar" id="progressBar"></div>
            </div>
            <div class="progress-text" id="progressText">0%</div>
        </div>

        <!-- Result message with link and copy button -->
        <div id="resultMessage" class="result-message">
            <div id="uploadSuccess" style="display: none;">
                <p>file uploaded successfully</p>
                <div class="link-container">
                    <a id="downloadLink" href="" target="_blank"></a>
                    <button id="copyButton" onclick="copyLink()">
                        copy
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Previous JavaScript remains the same
        const fileInput = document.getElementById('fileInput');
        const uploadButton = document.getElementById('uploadButton');
        const progressContainer = document.getElementById('progressContainer');
        const progressBar = document.getElementById('progressBar');
        const progressText = document.getElementById('progressText');
        const resultMessage = document.getElementById('resultMessage');
        const uploadSuccess = document.getElementById('uploadSuccess');
        const downloadLink = document.getElementById('downloadLink');
        
        function uploadFile() {
            const file = fileInput.files[0];
            if (!file) {
                alert('Please select a file first!');
                return;
            }

            progressContainer.style.display = 'block';
            uploadButton.disabled = true;
            uploadSuccess.style.display = 'none';

            const formData = new FormData();
            formData.append('file', file);

            const xhr = new XMLHttpRequest();
            xhr.open('POST', '/upload', true);

            xhr.upload.onprogress = (event) => {
                if (event.lengthComputable) {
                    const percent = (event.loaded / event.total) * 100;
                    progressBar.style.width = percent + '%';
                    progressText.textContent = Math.round(percent) + '%';
                }
            };

            xhr.onload = () => {
                if (xhr.status === 200) {
                    const response = JSON.parse(xhr.responseText);
                    if (response.success) {
                        const fullUrl = window.location.origin + response.downloadLink;
                        downloadLink.href = fullUrl;
                        downloadLink.textContent = fullUrl;
                        uploadSuccess.style.display = 'block';
                    } else {
                        resultMessage.textContent = 'upload failed. please try again.';
                    }
                } else {
                    resultMessage.textContent = 'upload failed. please try again.';
                }
                uploadButton.disabled = false;
            };

            xhr.onerror = () => {
                resultMessage.textContent = 'upload failed. please check your connection.';
                uploadButton.disabled = false;
            };

            xhr.send(formData);
        }

        function copyLink() {
            const linkText = downloadLink.href;
            navigator.clipboard.writeText(linkText).then(() => {
                const copyButton = document.getElementById('copyButton');
                copyButton.textContent = 'copied!';
                setTimeout(() => {
                    copyButton.textContent = 'copy';
                }, 2000);
            }).catch(err => {
                console.error('Failed to copy link: ', err);
            });
        }

        fileInput.addEventListener('change', () => {
            progressContainer.style.display = 'none';
            progressBar.style.width = '0%';
            progressText.textContent = '0%';
            uploadSuccess.style.display = 'none';
            uploadButton.disabled = false;
        });
    </script>
</body>
</html>

================
File: public/style.css
================
/* Reset and base styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Courier New', monospace;
}

body {
    min-height: 100vh;
    background-color: #ffffff;
    color: #1a1a1a;
    display: flex;
    flex-direction: column;
    padding: 2rem;
}

/* Logo styling */
.logo {
    position: fixed;
    top: 2rem;
    left: 2rem;
    font-size: 1.2rem;
    font-weight: bold;
    color: #1a1a1a;
}

/* Main container */
.container {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    max-width: 600px;
    margin: 0 auto;
    padding: 2rem;
}

/* Upload form */
.upload-form {
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

input[type="file"] {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #1a1a1a;
    border-radius: 4px;
    font-size: 0.9rem;
}

button {
    background-color: #1a1a1a;
    color: #ffffff;
    border: none;
    padding: 0.8rem 1.5rem;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.9rem;
    transition: background-color 0.2s;
}

button:hover {
    background-color: #333;
}

button:disabled {
    background-color: #999;
    cursor: not-allowed;
}

/* Progress bar */
.progress-container {
    width: 100%;
    margin: 1rem 0;
}

.progress {
    width: 100%;
    height: 4px;
    background-color: #eee;
    border-radius: 2px;
    overflow: hidden;
}

.progress-bar {
    height: 100%;
    background-color: #1a1a1a;
    transition: width 0.3s ease;
}

.progress-text {
    margin-top: 0.5rem;
    font-size: 0.9rem;
    text-align: center;
}

/* Result message and link container */
.result-message {
    width: 100%;
    margin-top: 1rem;
}

.link-container {
    display: flex;
    gap: 0.5rem;
    margin-top: 1rem;
    padding: 1rem;
    background-color: #f5f5f5;
    border-radius: 4px;
    word-break: break-all;
}

.link-container a {
    flex: 1;
    color: #1a1a1a;
    text-decoration: none;
    font-size: 0.9rem;
}

.link-container a:hover {
    text-decoration: underline;
}

/* Download page specific styles */
.download-info {
    width: 100%;
    margin-bottom: 2rem;
}

.info-row {
    display: flex;
    margin-bottom: 1rem;
    font-size: 0.9rem;
}

.info-row .label {
    min-width: 4rem;
    color: #666;
}

.info-row .value {
    word-break: break-all;
}

.download-button {
    min-width: 150px;
}

/* Success message */
#uploadSuccess p {
    text-align: center;
    color: #1a1a1a;
    margin-bottom: 1rem;
}

================
File: package.json
================
{
  "name": "upfile",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "bcrypt": "^5.1.1",
    "body-parser": "^1.20.3",
    "crypto": "^1.0.1",
    "ejs": "^3.1.10",
    "express": "^4.21.1",
    "express-session": "^1.18.1",
    "fs": "^0.0.1-security",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.7.2",
    "multer": "^1.4.5-lts.1",
    "path": "^0.12.7"
  }
}

================
File: server.js
================
const express = require('express');
const fs = require('fs');
const crypto = require('crypto');
const path = require('path');
const multer = require('multer');

const app = express();
const port = 3000;

// Set up EJS as view engine
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'public'));

// Serve static files from the 'public' folder
app.use(express.static('public'));

// Set up storage for files
const storage = multer.diskStorage({
    destination: './uploads/',
    filename: (req, file, cb) => {
        const uniqueSuffix = crypto.randomBytes(8).toString('hex');
        cb(null, uniqueSuffix + path.extname(file.originalname));
    }
});

const upload = multer({ storage: storage });

// Create the uploads folder if it doesn't exist
if (!fs.existsSync('./uploads')) {
    fs.mkdirSync('./uploads');
}

const fileLinks = {};

// Routes
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.post('/upload', upload.single('file'), (req, res) => {
    if (!req.file) {
        return res.status(400).json({
            success: false,
            message: 'No file uploaded.'
        });
    }

    const downloadId = crypto.randomBytes(8).toString('hex');
    const filePath = path.join(__dirname, 'uploads', req.file.filename);
    fileLinks[downloadId] = { 
        filePath: filePath, 
        fileName: req.file.originalname 
    };
    
    const downloadLink = `/download/${downloadId}`;
    res.json({
        success: true,
        message: 'File uploaded successfully!',
        downloadLink: downloadLink
    });
});

app.get('/download/:id', (req, res) => {
    const downloadId = req.params.id;
    const fileInfo = fileLinks[downloadId];
    
    if (!fileInfo) {
        return res.status(404).send('File not found.');
    }

    const fileSize = fs.statSync(fileInfo.filePath).size;
    const formattedSize = (fileSize / (1024 * 1024)).toFixed(2) + " MB";

    res.render('download', {
        fileName: fileInfo.fileName,
        fileSize: formattedSize
    });
});

app.get('/download/:id/download', (req, res) => {
    const downloadId = req.params.id;
    const fileInfo = fileLinks[downloadId];

    if (!fileInfo) {
        return res.status(404).send('File not found.');
    }

    res.download(fileInfo.filePath, fileInfo.fileName, (err) => {
        if (err) {
            console.error(`Error downloading file: ${err}`);
            res.status(500).send('Error downloading file.');
        }
    });
});

app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});
