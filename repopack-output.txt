This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-25T13:00:40.863Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
package.json
public/index.html
public/style.css
server.js

================================================================
Repository Files
================================================================

================
File: package.json
================
{
  "name": "upfile",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "crypto": "^1.0.1",
    "express": "^4.21.1",
    "multer": "^1.4.5-lts.1"
  }
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>UpFile - Upload Your File</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="container">
        <h1>Upload Your File</h1>
        
        <!-- File input and upload button -->
        <div class="upload-form">
            <input type="file" id="fileInput" name="file" required>
            <button id="uploadButton" onclick="uploadFile()">Upload</button>
        </div>

        <!-- Progress bar container -->
        <div class="progress-container" id="progressContainer" style="display: none;">
            <div class="progress">
                <div class="progress-bar" id="progressBar"></div>
            </div>
            <div class="progress-text" id="progressText">0%</div>
        </div>

        <!-- Result message -->
        <div id="resultMessage" class="result-message"></div>
    </div>

    <script>
        const fileInput = document.getElementById('fileInput');
        const uploadButton = document.getElementById('uploadButton');
        const progressContainer = document.getElementById('progressContainer');
        const progressBar = document.getElementById('progressBar');
        const progressText = document.getElementById('progressText');
        const resultMessage = document.getElementById('resultMessage');

        function uploadFile() {
            const file = fileInput.files[0];
            if (!file) {
                alert('Please select a file first!');
                return;
            }

            // Show progress bar and disable button
            progressContainer.style.display = 'block';
            uploadButton.disabled = true;
            resultMessage.textContent = '';

            // Create FormData and append file
            const formData = new FormData();
            formData.append('file', file);

            // Create and configure XHR
            const xhr = new XMLHttpRequest();
            xhr.open('POST', '/upload', true);

            // Upload progress handler
            xhr.upload.onprogress = (event) => {
                if (event.lengthComputable) {
                    const percent = (event.loaded / event.total) * 100;
                    progressBar.style.width = percent + '%';
                    progressText.textContent = Math.round(percent) + '%';
                }
            };

            // Upload complete handler
            xhr.onload = () => {
                if (xhr.status === 200) {
                    resultMessage.innerHTML = xhr.responseText;
                    resultMessage.style.color = '#4CAF50';
                } else {
                    resultMessage.textContent = 'Upload failed. Please try again.';
                    resultMessage.style.color = '#f44336';
                }
                uploadButton.disabled = false;
            };

            // Upload error handler
            xhr.onerror = () => {
                resultMessage.textContent = 'Upload failed. Please check your connection.';
                resultMessage.style.color = '#f44336';
                uploadButton.disabled = false;
            };

            // Send the file
            xhr.send(formData);
        }

        // Reset progress when new file is selected
        fileInput.addEventListener('change', () => {
            progressContainer.style.display = 'none';
            progressBar.style.width = '0%';
            progressText.textContent = '0%';
            resultMessage.textContent = '';
            uploadButton.disabled = false;
        });
    </script>
</body>
</html>

================
File: public/style.css
================
/* Existing styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
}

.container {
    text-align: center;
    background-color: #fff;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    max-width: 400px;
    width: 100%;
}

.container h1 {
    font-size: 24px;
    margin-bottom: 20px;
}

/* New styles for upload form and progress bar */
.upload-form {
    margin-bottom: 20px;
}

input[type="file"] {
    display: block;
    margin: 0 auto 20px;
    width: 100%;
    max-width: 300px;
}

button {
    background-color: #3498db;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #2980b9;
}

button:disabled {
    background-color: #bdc3c7;
    cursor: not-allowed;
}

/* Progress bar styles */
.progress-container {
    margin: 20px auto;
    width: 100%;
    max-width: 300px;
}

.progress {
    width: 100%;
    height: 20px;
    background-color: #f3f3f3;
    border-radius: 10px;
    overflow: hidden;
    margin-bottom: 10px;
}

.progress-bar {
    width: 0;
    height: 100%;
    background-color: #3498db;
    transition: width 0.3s ease;
}

.progress-text {
    font-size: 14px;
    color: #666;
}

/* Result message styles */
.result-message {
    margin-top: 20px;
    padding: 10px;
    word-break: break-all;
}

.result-message a {
    color: #3498db;
    text-decoration: none;
}

.result-message a:hover {
    text-decoration: underline;
}

================
File: server.js
================
const express = require('express');
const multer = require('multer');
const path = require('path');
const crypto = require('crypto');
const fs = require('fs');

const app = express();
const port = 3000;

// Serve static files from the 'public' folder
app.use(express.static('public'));

// Set up storage for files
const storage = multer.diskStorage({
    destination: './uploads/',
    filename: (req, file, cb) => {
        const uniqueSuffix = crypto.randomBytes(8).toString('hex');
        cb(null, uniqueSuffix + path.extname(file.originalname));
    }
});

const upload = multer({ storage: storage });

// Create the uploads folder if it doesn't exist
if (!fs.existsSync('./uploads')) {
    fs.mkdirSync('./uploads');
}

const fileLinks = {};

app.post('/upload', upload.single('file'), (req, res) => {
    if (!req.file) {
        console.error('No file uploaded.');
        return res.status(400).send('No file uploaded.');
    }

    const downloadId = crypto.randomBytes(8).toString('hex');
    const filePath = path.join(__dirname, 'uploads', req.file.filename);
    fileLinks[downloadId] = { filePath: filePath, fileName: req.file.originalname };
    const downloadLink = `http://localhost:${port}/download/${downloadId}`;
    
    res.json({
        success: true,
        message: 'File uploaded successfully!',
        downloadLink: downloadLink
    });
});

app.get('/', (req, res) => {
    res.send(`
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Upload File</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    background-color: #f0f0f0;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    height: 100vh;
                    margin: 0;
                }
                .container {
                    text-align: center;
                    background-color: #fff;
                    padding: 30px;
                    border-radius: 10px;
                    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
                    max-width: 400px;
                    width: 100%;
                }
                h1 {
                    font-size: 24px;
                    margin-bottom: 20px;
                }
                input[type="file"] {
                    margin-bottom: 20px;
                }
                .progress-container {
                    margin: 20px 0;
                    display: none;
                }
                .progress {
                    width: 100%;
                    background-color: #f3f3f3;
                    border-radius: 5px;
                    overflow: hidden;
                }
                .progress-bar {
                    height: 20px;
                    width: 0;
                    background-color: #3498db;
                    transition: width 0.3s ease;
                }
                .progress-status {
                    margin-top: 10px;
                    font-size: 14px;
                    color: #666;
                }
                button {
                    background-color: #3498db;
                    color: white;
                    padding: 10px 20px;
                    border: none;
                    border-radius: 5px;
                    cursor: pointer;
                    font-size: 16px;
                }
                button:hover {
                    background-color: #2980b9;
                }
                button:disabled {
                    background-color: #bdc3c7;
                    cursor: not-allowed;
                }
                #upload-result {
                    margin-top: 20px;
                    padding: 10px;
                    border-radius: 5px;
                    display: none;
                }
                #upload-result.success {
                    background-color: #d4edda;
                    color: #155724;
                    border: 1px solid #c3e6cb;
                }
                #upload-result.error {
                    background-color: #f8d7da;
                    color: #721c24;
                    border: 1px solid #f5c6cb;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>Upload Your File</h1>
                <input type="file" id="fileInput" />
                <button id="uploadButton" onclick="uploadFile()">Upload</button>
                
                <div class="progress-container" id="progressContainer">
                    <div class="progress">
                        <div class="progress-bar" id="progressBar"></div>
                    </div>
                    <div class="progress-status" id="progressStatus">0%</div>
                </div>

                <div id="upload-result"></div>
            </div>

            <script>
                const uploadButton = document.getElementById('uploadButton');
                const fileInput = document.getElementById('fileInput');
                const progressContainer = document.getElementById('progressContainer');
                const progressBar = document.getElementById('progressBar');
                const progressStatus = document.getElementById('progressStatus');
                const uploadResult = document.getElementById('upload-result');

                function formatFileSize(bytes) {
                    if (bytes === 0) return '0 Bytes';
                    const k = 1024;
                    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                    const i = Math.floor(Math.log(bytes) / Math.log(k));
                    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
                }

                function uploadFile() {
                    const file = fileInput.files[0];
                    if (!file) {
                        alert('Please select a file to upload.');
                        return;
                    }

                    // Reset and show progress elements
                    progressBar.style.width = '0%';
                    progressStatus.textContent = '0%';
                    progressContainer.style.display = 'block';
                    uploadButton.disabled = true;
                    uploadResult.style.display = 'none';

                    const formData = new FormData();
                    formData.append('file', file);

                    const xhr = new XMLHttpRequest();
                    xhr.open('POST', '/upload', true);

                    // Track upload progress
                    xhr.upload.onprogress = function(event) {
                        if (event.lengthComputable) {
                            const percentComplete = Math.round((event.loaded / event.total) * 100);
                            const uploadedSize = formatFileSize(event.loaded);
                            const totalSize = formatFileSize(event.total);
                            
                            progressBar.style.width = percentComplete + '%';
                            progressStatus.textContent = \`\${percentComplete}% (\${uploadedSize} of \${totalSize})\`;
                        }
                    };

                    // Handle completion
                    xhr.onload = function() {
                        uploadButton.disabled = false;
                        
                        if (xhr.status === 200) {
                            const response = JSON.parse(xhr.responseText);
                            uploadResult.innerHTML = \`
                                File uploaded successfully!<br>
                                <a href="\${response.downloadLink}" target="_blank">Download Link</a>
                            \`;
                            uploadResult.className = 'success';
                        } else {
                            uploadResult.textContent = 'Error uploading file.';
                            uploadResult.className = 'error';
                        }
                        uploadResult.style.display = 'block';
                    };

                    // Handle errors
                    xhr.onerror = function() {
                        uploadButton.disabled = false;
                        uploadResult.textContent = 'Network error occurred while uploading.';
                        uploadResult.className = 'error';
                        uploadResult.style.display = 'block';
                    };

                    xhr.send(formData);
                }

                // Reset UI when a new file is selected
                fileInput.addEventListener('change', function() {
                    progressContainer.style.display = 'none';
                    uploadResult.style.display = 'none';
                    uploadButton.disabled = false;
                });
            </script>
        </body>
        </html>
    `);
});

// [Rest of the routes remain the same...]

app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});
