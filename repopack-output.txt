This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-27T22:49:48.866Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
public/
  about.ejs
  admin-settings.ejs
  download.ejs
  index.ejs
  login.ejs
  profile.ejs
  register.ejs
  style.css
  test-throttling.ejs
.gitignore
package.json
server.js

================================================================
Repository Files
================================================================

================
File: public/about.ejs
================
<!DOCTYPE html>
<html lang="en" data-theme="<%= theme %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>About Us - upfile.1</title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <a href="/" class="logo">upfile.1</a>
    <div class="auth-links">
        <a href="/register">register</a> | <a href="/login">login</a>
    </div>
    
    <div class="container">
        <div class="about-content">
            <h2>About Us</h2>
            <p>upfile.1 is a simple, secure file sharing service designed with simplicity and efficiency in mind.</p>
            <p>Our mission is to provide a straightforward way to share files without unnecessary complications.</p>
            <!-- Add more content as needed -->
        </div>
    </div>

    <div class="footer">
        <a href="/about">about us</a>
    </div>

    <style>
        .about-content {
            max-width: 600px;
            text-align: center;
            line-height: 1.6;
        }

        .about-content h2 {
            margin-bottom: 2rem;
        }

        .about-content p {
            margin-bottom: 1rem;
        }
    </style>
</body>
</html>

================
File: public/admin-settings.ejs
================
<!DOCTYPE html>
<html lang="en" data-theme="<%= theme %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Settings - upfile.1</title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <a href="/" class="logo">upfile.1</a>
    <div class="auth-links">
        <a href="/profile">profile</a> | <a href="/logout">logout</a>
    </div>
    
    <div class="container">
        <div class="admin-settings">
            <h2>Admin Settings</h2>
            
            <div class="settings-tabs">
                <button class="tab-button active" onclick="openTab('general')">general</button>
                <button class="tab-button" onclick="openTab('display')">display</button>
            </div>

            <!-- General Settings Tab -->
            <div id="general" class="tab-content active">
                <form action="/admin-settings/general" method="POST" class="settings-form">
                    <div class="form-group">
                        <label for="maxUploadSize">maximum upload size (MB):</label>
                        <input type="number" 
                               id="maxUploadSize" 
                               name="maxUploadSize" 
                               value="<%= Math.floor(settings.maxUploadSize / (1024 * 1024)) %>" 
                               required>
                    </div>

                    <div class="form-group">
                        <label for="maxDownloadSize">download limit before throttling (GB):</label>
                        <input type="number" 
                               id="maxDownloadSize" 
                               name="maxDownloadSize" 
                               value="<%= Math.floor(settings.maxDownloadSize / (1024 * 1024 * 1024)) %>" 
                               required>
                    </div>

                    <div class="form-group">
                        <label for="throttleSpeed">throttled download speed (MB/s):</label>
                        <input type="number" 
                               id="throttleSpeed" 
                               name="throttleSpeed" 
                               value="<%= Math.floor(settings.throttleSpeed / (1024 * 1024)) %>" 
                               required>
                    </div>

                    <button type="submit">save general settings</button>
                </form>
            </div>

            <!-- Display Settings Tab -->
            <div id="display" class="tab-content">
                <form action="/admin-settings/display" method="POST" class="settings-form">
                    <div class="form-group">
                        <label for="defaultTheme">default theme:</label>
                        <select id="defaultTheme" name="defaultTheme">
                            <option value="light" <%= settings.defaultTheme === 'light' ? 'selected' : '' %>>light</option>
                            <option value="dark" <%= settings.defaultTheme === 'dark' ? 'selected' : '' %>>dark</option>
                        </select>
                    </div>

                    <button type="submit">save display settings</button>
                </form>
            </div>

            <div class="settings-info">
                <p>last updated: <%= settings.lastUpdated.toLocaleString() %></p>
            </div>
        </div>
    </div>

    <style>
        .settings-tabs {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
            border-bottom: 1px solid #1a1a1a;
            padding-bottom: 1rem;
        }

        .tab-button {
            background: none;
            border: none;
            color: #666;
            cursor: pointer;
            font-family: 'Courier New', monospace;
            font-size: 1rem;
            padding: 0.5rem 1rem;
            transition: color 0.2s;
        }

        .tab-button:hover {
            color: #1a1a1a;
        }

        .tab-button.active {
            color: #1a1a1a;
            border-bottom: 2px solid #1a1a1a;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        select {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #1a1a1a;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
            background-color: #ffffff;
        }
    </style>

    <script>
        function openTab(tabName) {
            // Hide all tab content
            const tabContents = document.getElementsByClassName('tab-content');
            for (let content of tabContents) {
                content.classList.remove('active');
            }

            // Deactivate all tabs
            const tabButtons = document.getElementsByClassName('tab-button');
            for (let button of tabButtons) {
                button.classList.remove('active');
            }

            // Show selected tab content and activate tab
            document.getElementById(tabName).classList.add('active');
            event.currentTarget.classList.add('active');
        }
    </script>
</body>
</html>

================
File: public/download.ejs
================
<!DOCTYPE html>
<html lang="en" data-theme="<%= theme %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Download - upfile.1</title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <a href="/" class="logo">upfile.1</a>
    
    <div class="container">
        <div class="download-info">
            <div class="info-row">
                <span class="label">file:</span>
                <span class="value"><%= fileName %></span>
            </div>
            <div class="info-row">
                <span class="label">size:</span>
                <span class="value"><%= fileSize %></span>
            </div>
        </div>
        <button onclick="startDownload()" class="download-button">download</button>
    </div>

    <script>
        async function startDownload() {
            try {
                const response = await fetch('/check-download-status');
                const data = await response.json();
                
                if (data.willBeThrottled) {
                    alert('You have exceeded your download limit. Download speed will be throttled.');
                }
                
                window.location.href = window.location.pathname + '/download';
            } catch (error) {
                console.error('Error:', error);
                alert('Error starting download. Please try again.');
            }
        }
    </script>
    <div class="footer">
        <a href="/about">about us</a>
    </div>
</body>
</html>

================
File: public/index.ejs
================
<!DOCTYPE html>
<html lang="en" data-theme="<%= theme %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>upfile.1 - File Sharing</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <a href="/" class="logo">upfile.1</a>
    <div class="auth-links">
        <a href="/register">register</a> | <a href="/login">login</a>
    </div>
    <div class="container">
        <div class="upload-form">
            <input type="file" id="fileInput" name="file" required>
            <button id="uploadButton" onclick="uploadFile()">upload</button>
        </div>

        <!-- Progress bar container -->
        <div class="progress-container" id="progressContainer" style="display: none;">
            <div class="progress">
                <div class="progress-bar" id="progressBar"></div>
            </div>
            <div class="progress-text" id="progressText">0%</div>
        </div>

        <!-- Result message and success container -->
<div class="result-message">
    <!-- Error messages will go here -->
    <div id="resultMessage"></div>
    <!-- Success message with link -->
    <div id="uploadSuccess" style="display: none;">
        <p>file uploaded successfully</p>
        <div class="link-container">
            <a id="downloadLink" href="" target="_blank"></a>
            <button id="copyButton" onclick="copyLink()">
                copy
            </button>
        </div>
    </div>
</div>
    </div>

    <script>
     // Keep your existing variable declarations
const fileInput = document.getElementById('fileInput');
const uploadButton = document.getElementById('uploadButton');
const progressContainer = document.getElementById('progressContainer');
const progressBar = document.getElementById('progressBar');
const progressText = document.getElementById('progressText');
const resultMessage = document.getElementById('resultMessage');
const uploadSuccess = document.getElementById('uploadSuccess');
const downloadLink = document.getElementById('downloadLink');

// Add this new function
async function getMaxFileSize() {
    try {
        const response = await fetch('/get-max-file-size');
        const data = await response.json();
        return data.maxSize;
    } catch (error) {
        console.error('Error getting max file size:', error);
        return null;
    }
}

// Update your existing uploadFile function to be async
async function uploadFile() {
    const file = fileInput.files[0];
    if (!file) {
        alert('Please select a file first!');
        return;
    }

    // Add this new size check
    const maxSize = await getMaxFileSize();
    if (maxSize && file.size > maxSize) {
        const maxSizeMB = (maxSize / (1024 * 1024)).toFixed(2);
        resultMessage.textContent = `File size exceeds the limit of ${maxSizeMB} MB`;
        return;
    }

    // Rest of your existing uploadFile function stays the same
    progressContainer.style.display = 'block';
    uploadButton.disabled = true;
    uploadSuccess.style.display = 'none';
    resultMessage.textContent = '';

    const formData = new FormData();
    formData.append('file', file);

    const xhr = new XMLHttpRequest();
    xhr.open('POST', '/upload', true);

    xhr.upload.onprogress = (event) => {
        if (event.lengthComputable) {
            const percent = (event.loaded / event.total) * 100;
            progressBar.style.width = percent + '%';
            progressText.textContent = Math.round(percent) + '%';
        }
    };

    xhr.onload = () => {
        try {
            const response = JSON.parse(xhr.responseText);
            
            if (xhr.status === 200 && response.success) {
                // Hide progress bar
                progressContainer.style.display = 'none';
                
                // Show success message and link
                const fullUrl = window.location.origin + response.downloadLink;
                downloadLink.href = fullUrl;
                downloadLink.textContent = fullUrl;
                uploadSuccess.style.display = 'block';
                resultMessage.textContent = '';
            } else {
                // Show error message
                progressContainer.style.display = 'none';
                uploadSuccess.style.display = 'none';
                resultMessage.textContent = response.message || 'Upload failed. Please try again.';
            }
        } catch (e) {
            // Handle parsing error
            progressContainer.style.display = 'none';
            uploadSuccess.style.display = 'none';
            resultMessage.textContent = 'Upload failed. Please try again.';
        }
        
        // Re-enable upload button
        uploadButton.disabled = false;
    };

    xhr.onerror = () => {
        progressContainer.style.display = 'none';
        uploadSuccess.style.display = 'none';
        resultMessage.textContent = 'Upload failed. Please check your connection.';
        uploadButton.disabled = false;
    };

    xhr.send(formData);
}

// Keep your existing copyLink function
function copyLink() {
    const linkText = downloadLink.href;
    navigator.clipboard.writeText(linkText).then(() => {
        const copyButton = document.getElementById('copyButton');
        copyButton.textContent = 'copied!';
        setTimeout(() => {
            copyButton.textContent = 'copy';
        }, 2000);
    }).catch(err => {
        console.error('Failed to copy link: ', err);
    });
}

fileInput.addEventListener('change', () => {
    progressContainer.style.display = 'none';
    progressBar.style.width = '0%';
    progressText.textContent = '0%';
    uploadSuccess.style.display = 'none';
    resultMessage.textContent = ''; // Clear any error messages
    uploadButton.disabled = false;
});
    </script>
    <div class="footer">
        <a href="/about">about us</a>
    </div>
</body>
</html>

================
File: public/login.ejs
================
<!DOCTYPE html>
<html lang="en" data-theme="<%= theme %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - upfile.1</title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <a href="/" class="logo">upfile.1</a>
    <div class="auth-links">
        <a href="/register">register</a> | <a href="/login">login</a>
    </div>
    
    <div class="container">
        <form action="/login" method="POST" class="auth-form">
            <h2>Login</h2>
            <div class="form-group">
                <label for="username">username:</label>
                <input type="text" id="username" name="username" required>
            </div>
            <div class="form-group">
                <label for="password">password:</label>
                <input type="password" id="password" name="password" required>
            </div>
            <button type="submit">login</button>
        </form>
    </div>
    <div class="footer">
        <a href="/about">about us</a>
    </div>
</body>
</html>

================
File: public/profile.ejs
================
<!DOCTYPE html>
<html lang="en" data-theme="<%= theme %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile - upfile.1</title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <a href="/" class="logo">upfile.1</a>
    <div class="auth-links">
        <a href="/logout">logout</a>
    </div>
    
    <div class="container">
        <div class="profile-info">
            <h2>Profile</h2>
            <div class="info-row">
                
                <span class="label">username:</span>
                <span class="value"><%= user.username %></span>
            </div>
            <div class="info-row">
                <span class="label">email:</span>
                <span class="value"><%= user.email %></span>
            </div>
            <div class="info-row">
                <span class="label">joined:</span>
                <span class="value"><%= user.createdAt.toLocaleDateString() %></span>
            </div>
        </div>
    </div>
    <div class="downloaded-files">
        <h3>Your Downloaded Files</h3>
        <% if (user.downloadedFiles.length > 0) { %>
            <ul>
                <% user.downloadedFiles.forEach(file => { %>
                    <li>
                        <span><%= file.fileName %> - downloaded on <%= file.downloadDate.toLocaleDateString() %></span>
                        <form action="/delete-download/<%= file.fileId %>" method="POST" style="display: inline;">
                            <button type="submit">Remove</button>
                        </form>
                    </li>
                <% }) %>
            </ul>
        <% } else { %>
            <p>No downloaded files.</p>
        <% } %>
    </div>
    <% if (user.isAdmin) { %>
        <div class="admin-section">
            <div class="admin-link">
                <a href="/admin-settings">admin settings</a>
            </div>
        </div>
    <% } %>
    <% if (!user.isAdmin) { %>
        <div class="footer">
            <a href="/about">about us</a>
        </div>
    <% } %>
</body>
</html>

================
File: public/register.ejs
================
<!DOCTYPE html>
<html lang="en" data-theme="<%= theme %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register - upfile.1</title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <a href="/" class="logo">upfile.1</a>
    <div class="auth-links">
        <a href="/register">register</a> | <a href="/login">login</a>
    </div>
    
    <div class="container">
        <form action="/register" method="POST" class="auth-form">
            <h2>Register</h2>
            <div class="form-group">
                <label for="username">username:</label>
                <input type="text" id="username" name="username" required>
            </div>
            <div class="form-group">
                <label for="email">email:</label>
                <input type="email" id="email" name="email" required>
            </div>
            <div class="form-group">
                <label for="password">password:</label>
                <input type="password" id="password" name="password" required>
            </div>
            <button type="submit">register</button>
        </form>
    </div>
    <div class="footer">
        <a href="/about">about us</a>
    </div>
</body>
</html>

================
File: public/style.css
================
/* Find this section at the top of your style.css */
:root {
    /* Light theme variables */
    --bg-color: #ffffff;
    --text-color: #1a1a1a;
    --border-color: #1a1a1a;
    --hover-bg: #333;
    --input-bg: #ffffff;
    --container-bg: #f9f9f9;
    --link-bg: #f5f5f5;
}

/* Dark theme variables */
[data-theme="dark"] {
    --bg-color: #1a1a1a;
    --text-color: #ffffff;
    --border-color: #ffffff;
    --hover-bg: #333;
    --input-bg: #2d2d2d;
    --container-bg: #2d2d2d;
    --link-bg: #2d2d2d;
}

/* Update your existing body styles */
body {
    min-height: 100vh;
    background-color: var(--bg-color);
    color: var(--text-color);
    display: flex;
    flex-direction: column;
    padding: 2rem;
    transition: background-color 0.3s, color 0.3s;
}

/* Update link colors */
.logo, .auth-links a, .footer a {
    color: var(--text-color);
}

button {
    background-color: var(--text-color);
    color: var(--bg-color);
}

input[type="file"], 
input[type="text"], 
input[type="email"], 
input[type="password"], 
input[type="number"], 
select {
    background-color: var(--input-bg);
    color: var(--text-color);
    border-color: var(--border-color);
}

.admin-settings {
    background-color: var(--container-bg);
}

/* Update link container background */
.link-container {
    background-color: var(--link-bg);
}

/* Update link container links */
.link-container a {
    color: var(--text-color);
}

/* Reset and base styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Courier New', monospace;
}

body {
    min-height: 100vh;
    background-color: var(--bg-color);
    color: var(--text-color);
    display: flex;
    flex-direction: column;
    padding: 2rem;
    transition: background-color 0.3s, color 0.3s;
}

/* Logo styling */
.logo {
    position: fixed;
    top: 2rem;
    left: 2rem;
    font-size: 1.2rem;
    font-weight: bold;
    color: #1a1a1a;
}

/* Main container */
.container {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    max-width: 600px;
    margin: 0 auto;
    padding: 2rem;
}

/* Upload form */
.upload-form {
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

input[type="file"] {/* Reset and base styles */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Courier New', monospace;
    }
    
    body {
        min-height: 100vh;
        background-color: #ffffff;
        color: #1a1a1a;
        display: flex;
        flex-direction: column;
        padding: 2rem;
    }
    
    /* Logo styling */
    .logo {
        position: fixed;
        top: 2rem;
        left: 2rem;
        font-size: 1.2rem;
        font-weight: bold;
        color: #1a1a1a;
    }
    
    /* Main container */
    .container {
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        max-width: 600px;
        margin: 0 auto;
        padding: 2rem;
    }
    
    /* Upload form */
    .upload-form {
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }
    
    input[type="file"] {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #1a1a1a;
        border-radius: 4px;
        font-size: 0.9rem;
    }
    
    button {
        background-color: var(--text-color);
        color: var(--bg-color);
        border: none;
        padding: 0.8rem 1.5rem;
        border-radius: 4px;
        cursor: pointer;
        font-size: 0.9rem;
        transition: background-color 0.2s;
    }
    
    button:hover {
        background-color: var(--text-color);
        color: var(--bg-color);
    }
    
    button:disabled {
        background-color: var(--text-color);
        color: var(--bg-color);
    }
    
    /* Progress bar */
    .progress-container {
        width: 100%;
        margin: 1rem 0;
    }
    
    .progress {
        width: 100%;
        height: 4px;
        background-color: #eee;
        border-radius: 2px;
        overflow: hidden;
    }
    
    .progress-bar {
        height: 100%;
        background-color: var(--text-color);
        transition: width 0.3s ease;
    }
    
    .progress-text {
        margin-top: 0.5rem;
        font-size: 0.9rem;
        text-align: center;
    }
    
    /* Result message and link container */
    .result-message {
        width: 100%;
        margin-top: 1rem;
    }
    
    .link-container {
        display: flex;
        gap: 0.5rem;
        margin-top: 1rem;
        padding: 1rem;
        background-color: #f5f5f5;
        border-radius: 4px;
        word-break: break-all;
    }
    
    .link-container a {
        flex: 1;
        color: #1a1a1a;
        text-decoration: none;
        font-size: 0.9rem;
    }
    
    .link-container a:hover {
        text-decoration: underline;
    }
    
    /* Download page specific styles */
    .download-info {
        width: 100%;
        margin-bottom: 2rem;
    }
    
    .info-row {
        display: flex;
        color: var(--text-color);
        margin-bottom: 1rem;
        font-size: 0.9rem;
    }
    
    .info-row .label {
        min-width: 4rem;
        color: var(--text-color);
        color: var(--text-color);
        color: #666;
    }
    
    .info-row .value {
        color: var(--text-color);
        word-break: break-all;
    }
    
    .download-button {
        min-width: 150px;
    }
    
    /* Success message */
    #uploadSuccess p {
        text-align: center;
        color: #1a1a1a;
        margin-bottom: 1rem;
    }
    
    /* Auth links */
    .auth-links {
        position: fixed;
        top: 2rem;
        right: 2rem;
        font-size: 1rem;
    }
    
    .auth-links a {
        color: #1a1a1a;
        text-decoration: none;
    }
    
    .auth-links a:hover {
        text-decoration: underline;
    }
    
    /* Auth forms */
    .auth-form {
        width: 100%;
        max-width: 400px;
        color: var(--text-color);
        padding: 2rem;
        border: 1px solid #eee;
        border-radius: 4px;
    }
    
    .auth-form h2 {
        margin-bottom: 1.5rem;
        color: var(--text-color);
        text-align: center;
    }
    
    .form-group {
        margin-bottom: 1rem;
    }
    
    .form-group label {
        display: block;
        color: var(--text-color);
        margin-bottom: 0.5rem;
    }
    
    .form-group input {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #1a1a1a;
        border-radius: 4px;
        font-size: 0.9rem;
    }
    
    /* Profile styles */
    .profile-info {
        width: 100%;
        max-width: 600px;
    }
    
    .profile-info h2 {
        margin-bottom: 2rem;
        text-align: center;
    }
    

  
/* Admin link color fix */
.admin-link a,
.admin-link a:visited {
    color: var(--text-color) !important;
    text-decoration: none;
    transition: color 0.3s;
}

.admin-link a:hover {
    color: var(--text-color) !important;
    text-decoration: underline;
}
    
    .admin-settings {
        width: 100%;
        max-width: 500px;
    }
    
    .settings-form {
        margin-top: 2rem;
        color: var(--text-color);
    }
    
    .settings-info {
        margin-top: 1rem;
        text-align: center;
        font-size: 0.9rem;
        color: #666;
    }
    
    /* Update this in public/style.css */
    .logo {
        position: fixed;
        top: 2rem;
        left: 2rem;
        font-size: 1.2rem;
        font-weight: bold;
        color: #1a1a1a;
        text-decoration: none;
    }
    
    .logo:hover {
        text-decoration: underline; /* Matches other link hover effects */
    }
    
    /* Add these styles to your existing CSS */
    /* Add this to your style.css */
    
    #resultMessage {
        color: #ff0000;
        margin: 1rem 0;
        text-align: center;
        font-weight: bold;
    }
    
    #uploadSuccess {
        margin-top: 1rem;
    }
    
    /* Update this in style.css */
    .footer {
        position: fixed;
        bottom: 2rem;
        left: 0;
        right: 0;
        text-align: center;
        font-size: 1rem;
    }
    
    .footer a {
        color: #1a1a1a;
        text-decoration: none;
        font-family: 'Courier New', monospace;
    }
    
    .footer a:hover {
        text-decoration: underline;
    }
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #1a1a1a;
    border-radius: 4px;
    font-size: 0.9rem;
}

button {
    background-color: var(--text-color);
    color: var(--bg-color);
    border: none;
    padding: 0.8rem 1.5rem;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.9rem;
    transition: background-color 0.2s;
}

button:hover {
    background-color: var(--text-color);
    color: var(--bg-color);
}

button:disabled {
    background-color: var(--text-color);
    color: var(--bg-color);
}

/* Progress bar */
.progress-container {
    width: 100%;
    margin: 1rem 0;
}

.progress {
    width: 100%;
    height: 4px;
    background-color: #eee;
    border-radius: 2px;
    overflow: hidden;
}

.progress-bar {
    height: 100%;
    background-color: #1a1a1a;
    transition: width 0.3s ease;
}

.progress-text {
    margin-top: 0.5rem;
    font-size: 0.9rem;
    text-align: center;
}

/* Result message and link container */
.result-message {
    width: 100%;
    margin-top: 1rem;
}

.link-container {
    display: flex;
    gap: 0.5rem;
    margin-top: 1rem;
    padding: 1rem;
    background-color: #f5f5f5;
    border-radius: 4px;
    word-break: break-all;
}

.link-container a {
    flex: 1;
    color: #1a1a1a;
    text-decoration: none;
    font-size: 0.9rem;
}

.link-container a:hover {
    text-decoration: underline;
}

/* Download page specific styles */
.download-info {
    width: 100%;
    margin-bottom: 2rem;
}

.info-row {
    display: flex;
    margin-bottom: 1rem;
    font-size: 0.9rem;
}

.info-row .label {
    min-width: 4rem;
    color: #666;
}

.info-row .value {
    word-break: break-all;
}

.download-button {
    min-width: 150px;
}

/* Success message */
#uploadSuccess p {
    text-align: center;
    color: #1a1a1a;
    margin-bottom: 1rem;
}

/* Auth links */
.auth-links {
    position: fixed;
    top: 2rem;
    right: 2rem;
    font-size: 1rem;
}

.auth-links a {
    color: #1a1a1a;
    text-decoration: none;
}

.auth-links a:hover {
    text-decoration: underline;
}

/* Auth forms */
.auth-form {
    width: 100%;
    max-width: 400px;
    padding: 2rem;
    border: 1px solid #eee;
    border-radius: 4px;
}

.auth-form h2 {
    margin-bottom: 1.5rem;
    text-align: center;
}

.form-group {
    margin-bottom: 1rem;
}

.form-group label {
    display: block;
    margin-bottom: 0.5rem;
}

.form-group input {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #1a1a1a;
    border-radius: 4px;
    font-size: 0.9rem;
}

/* Profile styles */
.profile-info {
    width: 100%;
    max-width: 600px;
}

.profile-info h2 {
    margin-bottom: 2rem;
    text-align: center;
}

/* Admin styles */
.admin-link {
    margin-top: 2rem;
    text-align: center;
}

.admin-settings {
    width: 100%;
    max-width: 500px;
}

.settings-form {
    margin-top: 2rem;
    color: var(--text-color);
}

.settings-info {
    margin-top: 1rem;
    text-align: center;
    font-size: 0.9rem;
    color: #666;
}

/* Update this in public/style.css */
.logo {
    position: fixed;
    top: 2rem;
    left: 2rem;
    font-size: 1.2rem;
    font-weight: bold;
    color: #1a1a1a;
    text-decoration: none;
}

.logo:hover {
    text-decoration: underline; /* Matches other link hover effects */
}

/* Add these styles to your existing CSS */
/* Add this to your style.css */

#resultMessage {
    color: #ff0000;
    margin: 1rem 0;
    text-align: center;
    font-weight: bold;
}

#uploadSuccess {
    margin-top: 1rem;
}

/* Update this in style.css */
.footer {
    position: fixed;
    bottom: 2rem;
    left: 0;
    right: 0;
    text-align: center;
    font-size: 1rem;
}

.footer a {
    color: #1a1a1a;
    text-decoration: none;
    font-family: 'Courier New', monospace;
}

.footer a:hover {
    text-decoration: underline;
}

.logo {
    color: var(--text-color) !important;
    transition: color 0.3s;
}

.auth-links {
    color: var(--text-color);
}

.auth-links a {
    color: var(--text-color) !important;
    transition: color 0.3s;
}

/* Footer links */
.footer a {
    color: var(--text-color) !important;
    transition: color 0.3s;
}

/* Hover states */
.logo:hover,
.auth-links a:hover,
.footer a:hover {
    color: var(--text-color) !important;
    text-decoration: underline;
}

================
File: public/test-throttling.ejs
================
<!-- Create views/test-throttling.ejs -->
<!DOCTYPE html>
<html>
<head>
    <title>Throttling Test</title>
    <script>
    async function testDownload() {
        const startTime = Date.now();
        const response = await fetch('/download/your-test-file-id/download');
        const reader = response.body.getReader();
        let receivedLength = 0;

        while(true) {
            const {done, value} = await reader.read();
            if (done) break;
            receivedLength += value.length;
            
            const elapsedSeconds = (Date.now() - startTime) / 1000;
            const speedMBps = (receivedLength / (1024 * 1024)) / elapsedSeconds;
            
            document.getElementById('stats').textContent = 
                `Downloaded: ${(receivedLength / (1024 * 1024)).toFixed(2)} MB
                 Speed: ${speedMBps.toFixed(2)} MB/s
                 Time: ${elapsedSeconds.toFixed(1)} seconds`;
        }
    }
    </script>
</head>
<body>
    <button onclick="testDownload()">Start Test Download</button>
    <pre id="stats"></pre>
</body>
</html>

================
File: .gitignore
================
# Dependencies
node_modules/
package-lock.json

# Upload directories
uploads/*
!uploads/.gitkeep

# Environment variables
.env
.env.local
.env.*.local

# Log files
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids/
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov/

# Coverage directory used by tools like istanbul
coverage/

# Temporary files
*.tmp
*.temp
.DS_Store
Thumbs.db

# IDE specific files
.idea/
.vscode/
*.swp
*.swo
*.swn
*.bak

# Build directory
dist/
build/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# Compressed files
*.zip
*.rar
*.7z
*.gz
*.zst

================
File: package.json
================
{
  "name": "upfile",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "bcrypt": "^5.1.1",
    "body-parser": "^1.20.3",
    "crypto": "^1.0.1",
    "ejs": "^3.1.10",
    "express": "^4.21.1",
    "express-session": "^1.18.1",
    "fs": "^0.0.1-security",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.7.2",
    "multer": "^1.4.5-lts.1",
    "path": "^0.12.7"
  }
}

================
File: server.js
================
const express = require('express');
const fs = require('fs');
const crypto = require('crypto');
const path = require('path');
const multer = require('multer');
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
const session = require('express-session');
const bodyParser = require('body-parser');
const stream = require('stream');
const util = require('util');

const app = express();
const port = 3000;

// MongoDB connection
mongoose.connect('mongodb://localhost/upfile', { 
    useNewUrlParser: true, 
    useUnifiedTopology: true 
}).then(() => {
    console.log('Connected to MongoDB');
}).catch(err => {
    console.error('MongoDB connection error:', err);
});

// User Schema
const userSchema = new mongoose.Schema({
    // Existing fields
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    isAdmin: { type: Boolean, default: false },
    createdAt: { type: Date, default: Date.now },
    
    // New field for downloaded files
    downloadedFiles: [
        {
            fileId: String,
            fileName: String,
            downloadDate: { type: Date, default: Date.now }
        }
    ]
});

const User = mongoose.model('User', userSchema);

const settingsSchema = new mongoose.Schema({
    maxUploadSize: { type: Number, default: 100 * 1024 * 1024 },
    maxDownloadSize: { type: Number, default: 2 * 1024 * 1024 * 1024 },
    throttleSpeed: { type: Number, default: 2 * 1024 * 1024 },
    defaultTheme: { type: String, default: 'light', enum: ['light', 'dark'] },
    lastUpdated: { type: Date, default: Date.now }
});

const Settings = mongoose.model('Settings', settingsSchema);

// Initialize default settings
async function initializeSettings() {
    try {
        const settings = await Settings.findOne();
        if (!settings) {
            await new Settings({}).save();
        }
    } catch (error) {
        console.error('Error initializing settings:', error);
    }
}
initializeSettings();

const downloadTrackingSchema = new mongoose.Schema({
    ip: { type: String, required: true },
    bytesDownloaded: { type: Number, default: 0 },
    lastReset: { type: Date, default: Date.now }
});

const DownloadTracking = mongoose.model('DownloadTracking', downloadTrackingSchema);

// Add this after the Settings model definition
const getFileSize = async () => {
    const settings = await Settings.findOne();
    return settings ? settings.maxUploadSize : 100 * 1024 * 1024; // Default 100MB if no settings
};

// Middleware
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'public'));
app.use(express.static('public'));
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.use(session({
    secret: 'your-secret-key',
    resave: false,
    saveUninitialized: false,
    cookie: { secure: false } // set to true if using HTTPS
}));

function createThrottledStream(readStream, speedBytes) {
    const throttle = new stream.Transform({
        transform(chunk, encoding, callback) {
            this.push(chunk);
            callback();
        }
    });

    let totalBytes = 0;
    let startTime = Date.now();

    throttle.on('data', chunk => {
        totalBytes += chunk.length;
        const elapsedSeconds = (Date.now() - startTime) / 1000;
        const currentSpeed = totalBytes / elapsedSeconds;

        if (currentSpeed > speedBytes) {
            const requiredDelay = (totalBytes / speedBytes) - elapsedSeconds;
            if (requiredDelay > 0) {
                throttle.pause();
                setTimeout(() => throttle.resume(), requiredDelay * 1000);
            }
        }
    });

    readStream.pipe(throttle);
    return throttle;
}


// Dark Theme
app.use(async (req, res, next) => {
    try {
        const settings = await Settings.findOne();
        res.locals.theme = settings ? settings.defaultTheme : 'light';
        next();
    } catch (error) {
        console.error('Error loading theme:', error);
        res.locals.theme = 'light';
        next();
    }
});

const trackDownload = async (req, res, next) => {
    try {
        const ip = req.ip;
        const settings = await Settings.findOne();
        const maxDownloadSize = settings ? settings.maxDownloadSize : 2 * 1024 * 1024 * 1024;

        let tracking = await DownloadTracking.findOne({ ip });

        if (!tracking || (Date.now() - tracking.lastReset > 24 * 60 * 60 * 1000)) {
            tracking = new DownloadTracking({ ip, bytesDownloaded: 0, lastReset: new Date() });
        }

        // Update user’s downloaded files if authenticated
        if (req.session.userId) {
            const user = await User.findById(req.session.userId);
            user.downloadedFiles.push({
                fileId: req.params.id, // fileId from route parameter
                fileName: fileInfo.fileName // Retrieved from fileLinks object
            });
            await user.save();
        }

        req.downloadTracking = tracking;
        next();
    } catch (error) {
        console.error('Download tracking error:', error);
        next(error);
    }
};



// Multer configuration
const storage = multer.diskStorage({
    destination: './uploads/',
    filename: (req, file, cb) => {
        const uniqueSuffix = crypto.randomBytes(8).toString('hex');
        cb(null, uniqueSuffix + path.extname(file.originalname));
    }
});

const upload = multer({
    storage: storage,
    fileFilter: async (req, file, cb) => {
        try {
            const maxSize = await getFileSize();
            const fileSize = parseInt(req.headers['content-length']);
            if (fileSize > maxSize) {
                return cb(new Error('File size exceeds the limit'));
            }
            cb(null, true);
        } catch (error) {
            cb(error);
        }
    }
});

const fileLinks = {};

// Authentication middleware
const requireAuth = (req, res, next) => {
    if (!req.session.userId) {
        return res.redirect('/login');
    }
    next();
};

// Routes
app.get('/', (req, res) => {
    res.render('index');  // Instead of res.sendFile()
});

app.get('/check-download-status', (async (req, res, next) => {
        try {
            const ip = req.ip;
            const settings = await Settings.findOne();
            const maxDownloadSize = settings ? settings.maxDownloadSize : 2 * 1024 * 1024 * 1024;

            let tracking = await DownloadTracking.findOne({ ip });

            if (!tracking || (Date.now() - tracking.lastReset > 24 * 60 * 60 * 1000)) {
                tracking = new DownloadTracking({ ip, bytesDownloaded: 0, lastReset: new Date() });
            }

            // Save download to user's downloaded files if logged in
            if (req.session.userId && req.params.id) {
                const user = await User.findById(req.session.userId);
                const fileInfo = fileLinks[req.params.id];

                // Check if file exists in fileLinks and then push download record
                if (fileInfo) {
                    user.downloadedFiles.push({
                        fileId: req.params.id,
                        fileName: fileInfo.fileName
                    });
                    await user.save();
                }
            }

            req.downloadTracking = tracking;
            next();
        } catch (error) {
            console.error('Download tracking error:', error);
            next(error);
        }
    }), async (req, res) => {
    try {
        const tracking = req.downloadTracking;
        const settings = await Settings.findOne();
        
        res.json({
            willBeThrottled: tracking.bytesDownloaded > settings.maxDownloadSize,
            throttleSpeed: Math.floor(settings.throttleSpeed / (1024 * 1024)) // Convert to MB/s
        });
    } catch (error) {
        console.error('Error checking download status:', error);
        res.status(500).json({ error: 'Error checking download status' });
    }
});

// Add this temporary route to server.js for testing
app.get('/generate-test-file', async (req, res) => {
    const filePath = path.join(__dirname, 'uploads', 'test-large-file');
    const fileSize = 100 * 1024 * 1024; // 100MB
    
    await new Promise((resolve, reject) => {
        const writeStream = fs.createWriteStream(filePath);
        let bytesWritten = 0;
        
        function writeChunk() {
            const chunkSize = 1024 * 1024; // 1MB chunks
            const buffer = Buffer.alloc(chunkSize, 'x');
            
            if (bytesWritten < fileSize) {
                writeStream.write(buffer);
                bytesWritten += chunkSize;
                setImmediate(writeChunk);
            } else {
                writeStream.end();
                resolve();
            }
        }
        
        writeChunk();
    });
    
    res.send('Test file generated');
});

// Add this to server.js to help with testing
app.get('/test-throttling', (req, res) => {
    res.render('test-throttling');
});

// Add to server.js
app.get('/test-throttling-setup', async (req, res) => {
    try {
        // Generate a 100MB test file
        const testFilePath = path.join(__dirname, 'uploads', 'throttle-test-file');
        const fileSize = 100 * 1024 * 1024; // 100MB
        
        // Generate file if it doesn't exist
        if (!fs.existsSync(testFilePath)) {
            const writeStream = fs.createWriteStream(testFilePath);
            const buffer = Buffer.alloc(1024 * 1024, 'x'); // 1MB chunk
            
            for(let i = 0; i < 100; i++) { // Write 100 chunks of 1MB
                writeStream.write(buffer);
            }
            writeStream.end();
        }

        // Create a download link
        const downloadId = crypto.randomBytes(8).toString('hex');
        fileLinks[downloadId] = {
            filePath: testFilePath,
            fileName: 'throttle-test-file'
        };

        res.send(`
            <h1>Throttling Test</h1>
            <p>Test file created (100MB)</p>
            <p>Download ID: ${downloadId}</p>
            <p><a href="/download/${downloadId}">Download Link</a></p>
            <p>Steps to test:</p>
            <ol>
                <li>Set throttle speed to 0.1 MB/s in admin settings</li>
                <li>Set download limit to 1 MB</li>
                <li>Open browser dev tools (Network tab)</li>
                <li>Click download link and monitor speed</li>
            </ol>
        `);
    } catch (error) {
        res.status(500).send('Error setting up test: ' + error.message);
    }
});

// Authentication routes
app.get('/register', (req, res) => {
    res.render('register');
});

app.post('/register', async (req, res) => {
    try {
        const userCount = await User.countDocuments();
        const hashedPassword = await bcrypt.hash(req.body.password, 10);
        const user = new User({
            username: req.body.username,
            password: hashedPassword,
            email: req.body.email,
            isAdmin: userCount === 0 // First user becomes admin
        });
        await user.save();
        res.redirect('/login');
    } catch (error) {
        console.error('Registration error:', error);
        res.redirect('/register');
    }
});

app.get('/login', (req, res) => {
    res.render('login');
});

app.post('/login', async (req, res) => {
    try {
        const user = await User.findOne({ username: req.body.username });
        if (user && await bcrypt.compare(req.body.password, user.password)) {
            req.session.userId = user._id;
            res.redirect('/profile');
        } else {
            res.redirect('/login');
        }
    } catch (error) {
        console.error('Login error:', error);
        res.redirect('/login');
    }
});

app.get('/profile', requireAuth, async (req, res) => {
    try {
        const user = await User.findById(req.session.userId);
        res.render('profile', { user });
    } catch (error) {
        console.error('Profile error:', error);
        res.redirect('/login');
    }
});

app.post('/delete-download/:fileId', requireAuth, async (req, res) => {
    try {
        const user = await User.findById(req.session.userId);
        user.downloadedFiles = user.downloadedFiles.filter(file => file.fileId !== req.params.fileId);
        await user.save();
        res.redirect('/profile');
    } catch (error) {
        console.error('Error deleting download:', error);
        res.status(500).send('Error deleting download.');
    }
});

app.get('/logout', (req, res) => {
    req.session.destroy();
    res.redirect('/');
});

// Add this with your other routes
app.get('/about', (req, res) => {
    res.render('about');
});

// Admin middleware
const requireAdmin = async (req, res, next) => {
    if (!req.session.userId) {
        return res.redirect('/login');
    }
    const user = await User.findById(req.session.userId);
    if (!user || !user.isAdmin) {
        return res.redirect('/profile');
    }
    next();
};

// Admin settings GET route
app.get('/admin-settings', requireAdmin, async (req, res) => {
    try {
        const settings = await Settings.findOne();
        const user = await User.findById(req.session.userId);
        res.render('admin-settings', { 
            user,
            settings: settings || { maxUploadSize: 100 * 1024 * 1024, lastUpdated: new Date() }
        });
    } catch (error) {
        console.error('Admin settings error:', error);
        res.redirect('/profile');
    }
});

// Admin settings POST route
// Update the admin settings routes
app.post('/admin-settings/general', requireAdmin, async (req, res) => {
    try {
        const maxUploadSize = parseInt(req.body.maxUploadSize);
        const maxDownloadSize = parseInt(req.body.maxDownloadSize);
        const throttleSpeed = parseInt(req.body.throttleSpeed);
        
        await Settings.findOneAndUpdate({}, {
            maxUploadSize: maxUploadSize * 1024 * 1024,
            maxDownloadSize: maxDownloadSize * 1024 * 1024 * 1024,
            throttleSpeed: throttleSpeed * 1024 * 1024,
            lastUpdated: new Date()
        }, { upsert: true });
        
        res.redirect('/admin-settings');
    } catch (error) {
        console.error('Settings update error:', error);
        res.redirect('/admin-settings');
    }
});

app.post('/admin-settings/display', requireAdmin, async (req, res) => {
    try {
        const { defaultTheme } = req.body;
        
        await Settings.findOneAndUpdate({}, {
            defaultTheme,
            lastUpdated: new Date()
        }, { upsert: true });
        
        res.redirect('/admin-settings');
    } catch (error) {
        console.error('Display settings update error:', error);
        res.redirect('/admin-settings');
    }
});

// File Size Check
app.get('/get-max-file-size', async (req, res) => {
    try {
        const settings = await Settings.findOne();
        const maxSize = settings ? settings.maxUploadSize : 100 * 1024 * 1024; // Default 100MB
        res.json({ maxSize });
    } catch (error) {
        console.error('Error getting max file size:', error);
        res.status(500).json({ 
            error: 'Server error',
            maxSize: 100 * 1024 * 1024 // Default fallback
        });
    }
});

// File upload routes
app.post('/upload', async (req, res) => {
    try {
        const maxSize = await getFileSize();
        const fileSize = parseInt(req.headers['content-length']);
        
        if (fileSize > maxSize) {
            const maxSizeMB = (maxSize / (1024 * 1024)).toFixed(2);
            return res.status(400).json({
                success: false,
                message: `File size exceeds the limit of ${maxSizeMB} MB`
            });
        }

        upload.single('file')(req, res, function(err) {
            if (err) {
                console.error('Upload error:', err);
                return res.status(400).json({
                    success: false,
                    message: err.message || 'Error uploading file'
                });
            }

            if (!req.file) {
                return res.status(400).json({
                    success: false,
                    message: 'No file uploaded.'
                });
            }

            const downloadId = crypto.randomBytes(8).toString('hex');
            const filePath = path.join(__dirname, 'uploads', req.file.filename);
            fileLinks[downloadId] = { 
                filePath: filePath, 
                fileName: req.file.originalname 
            };
            
            const downloadLink = `/download/${downloadId}`;
            res.json({
                success: true,
                message: 'File uploaded successfully!',
                downloadLink: downloadLink
            });
        });
    } catch (error) {
        console.error('Upload error:', error);
        res.status(500).json({
            success: false,
            message: 'Server error during upload'
        });
    }
});

app.get('/download/:id', (req, res) => {
    const downloadId = req.params.id;
    const fileInfo = fileLinks[downloadId];
    
    if (!fileInfo) {
        return res.status(404).send('File not found.');
    }

    const fileSize = fs.statSync(fileInfo.filePath).size;
    const formattedSize = (fileSize / (1024 * 1024)).toFixed(2) + " MB";

    res.render('download', {
        fileName: fileInfo.fileName,
        fileSize: formattedSize
    });
});

app.get('/download/:id/download', (async (req, res, next) => {
        try {
            const ip = req.ip;
            const settings = await Settings.findOne();
            const maxDownloadSize = settings ? settings.maxDownloadSize : 2 * 1024 * 1024 * 1024;

            let tracking = await DownloadTracking.findOne({ ip });

            if (!tracking || (Date.now() - tracking.lastReset > 24 * 60 * 60 * 1000)) {
                tracking = new DownloadTracking({ ip, bytesDownloaded: 0, lastReset: new Date() });
            }

            // Save download to user's downloaded files if logged in
            if (req.session.userId && req.params.id) {
                const user = await User.findById(req.session.userId);
                const fileInfo = fileLinks[req.params.id];

                // Check if file exists in fileLinks and then push download record
                if (fileInfo) {
                    user.downloadedFiles.push({
                        fileId: req.params.id,
                        fileName: fileInfo.fileName
                    });
                    await user.save();
                }
            }

            req.downloadTracking = tracking;
            next();
        } catch (error) {
            console.error('Download tracking error:', error);
            next(error);
        }
    }), async (req, res) => {
    const downloadId = req.params.id;
    const fileInfo = fileLinks[downloadId];

    if (!fileInfo) {
        return res.status(404).send('File not found.');
    }

    try {
        const stats = fs.statSync(fileInfo.filePath);
        const tracking = req.downloadTracking;
        const settings = await Settings.findOne();
        
        // Update bytes downloaded
        tracking.bytesDownloaded += stats.size;
        await tracking.save();

        // Set up the file stream
        const fileStream = fs.createReadStream(fileInfo.filePath);

        // Check if throttling is needed
        if (tracking.bytesDownloaded > settings.maxDownloadSize) {
            // Apply throttling
            const throttledStream = createThrottledStream(fileStream, settings.throttleSpeed);
            res.setHeader('Content-Type', 'application/octet-stream');
            res.setHeader('Content-Disposition', `attachment; filename="${fileInfo.fileName}"`);
            throttledStream.pipe(res);
        } else {
            // Normal download
            res.download(fileInfo.filePath, fileInfo.fileName);
        }

    } catch (error) {
        console.error('Download error:', error);
        res.status(500).send('Error processing download.');
    }
});

// Error handling middleware
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).send('Something broke!');
});

// Start server
app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});
