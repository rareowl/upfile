This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-27T15:58:38.717Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
public/
  admin-settings.ejs
  download.ejs
  index.ejs
  login.ejs
  profile.ejs
  register.ejs
  style.css
.gitignore
package.json
server.js

================================================================
Repository Files
================================================================

================
File: public/admin-settings.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Settings - upfile.1</title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <a href="/" class="logo">upfile.1</a>
    <div class="auth-links">
        <a href="/profile">profile</a> | <a href="/logout">logout</a>
    </div>
    
    <div class="container">
        <div class="admin-settings">
            <h2>Admin Settings</h2>
            <form action="/admin-settings" method="POST" class="settings-form">
                <div class="form-group">
                    <label for="maxUploadSize">Maximum Upload Size (MB):</label>
                    <input type="number" 
                           id="maxUploadSize" 
                           name="maxUploadSize" 
                           value="<%= Math.floor(settings.maxUploadSize / (1024 * 1024)) %>" 
                           required>
                </div>
                <button type="submit">Save Settings</button>
            </form>
            <div class="settings-info">
                <p>Last updated: <%= settings.lastUpdated.toLocaleString() %></p>
            </div>
        </div>
    </div>

    <style>
        .admin-settings {
            max-width: 500px;
            margin: 0 auto;
            padding: 2rem;
            background-color: #f9f9f9;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .admin-settings h2 {
            text-align: center;
            margin-bottom: 2rem;
        }

        .settings-form {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .form-group label {
            color: #666;
        }

        .form-group input {
            padding: 0.5rem;
            border: 1px solid #1a1a1a;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
        }

        button {
            margin-top: 1rem;
        }

        .settings-info {
            margin-top: 2rem;
            text-align: center;
            font-size: 0.9rem;
            color: #666;
        }
    </style>
</body>
</html>

================
File: public/download.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Download - upfile.1</title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <a href="/" class="logo">upfile.1</a>
    
    <div class="container">
        <div class="download-info">
            <div class="info-row">
                <span class="label">file:</span>
                <span class="value"><%= fileName %></span>
            </div>
            <div class="info-row">
                <span class="label">size:</span>
                <span class="value"><%= fileSize %></span>
            </div>
        </div>
        <button onclick="startDownload()" class="download-button">download</button>
    </div>

    <script>
        function startDownload() {
            window.location.href = window.location.pathname + '/download';
        }
    </script>
</body>
</html>

================
File: public/index.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>upfile.1 - File Sharing</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <a href="/" class="logo">upfile.1</a>
    <div class="auth-links">
        <a href="/register">register</a> | <a href="/login">login</a>
    </div>
    <div class="container">
        <div class="upload-form">
            <input type="file" id="fileInput" name="file" required>
            <button id="uploadButton" onclick="uploadFile()">upload</button>
        </div>

        <!-- Progress bar container -->
        <div class="progress-container" id="progressContainer" style="display: none;">
            <div class="progress">
                <div class="progress-bar" id="progressBar"></div>
            </div>
            <div class="progress-text" id="progressText">0%</div>
        </div>

        <!-- Result message with link and copy button -->
        <div id="resultMessage" class="result-message">
            <div id="uploadSuccess" style="display: none;">
                <p>file uploaded successfully</p>
                <div class="link-container">
                    <a id="downloadLink" href="" target="_blank"></a>
                    <button id="copyButton" onclick="copyLink()">
                        copy
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Previous JavaScript remains the same
        const fileInput = document.getElementById('fileInput');
        const uploadButton = document.getElementById('uploadButton');
        const progressContainer = document.getElementById('progressContainer');
        const progressBar = document.getElementById('progressBar');
        const progressText = document.getElementById('progressText');
        const resultMessage = document.getElementById('resultMessage');
        const uploadSuccess = document.getElementById('uploadSuccess');
        const downloadLink = document.getElementById('downloadLink');
        
        function uploadFile() {
            const file = fileInput.files[0];
            if (!file) {
                alert('Please select a file first!');
                return;
            }

            progressContainer.style.display = 'block';
            uploadButton.disabled = true;
            uploadSuccess.style.display = 'none';

            const formData = new FormData();
            formData.append('file', file);

            const xhr = new XMLHttpRequest();
            xhr.open('POST', '/upload', true);

            xhr.upload.onprogress = (event) => {
                if (event.lengthComputable) {
                    const percent = (event.loaded / event.total) * 100;
                    progressBar.style.width = percent + '%';
                    progressText.textContent = Math.round(percent) + '%';
                }
            };

            xhr.onload = () => {
    if (xhr.status === 200) {
        const response = JSON.parse(xhr.responseText);
        if (response.success) {
            const fullUrl = window.location.origin + response.downloadLink;
            downloadLink.href = fullUrl;
            downloadLink.textContent = fullUrl;
            uploadSuccess.style.display = 'block';
            resultMessage.textContent = '';
        } else {
            uploadSuccess.style.display = 'none';
            resultMessage.textContent = response.message || 'Upload failed. Please try again.';
        }
    } else {
        try {
            const response = JSON.parse(xhr.responseText);
            resultMessage.textContent = response.message || 'Upload failed. Please try again.';
        } catch (e) {
            resultMessage.textContent = 'Upload failed. Please try again.';
        }
    }
    uploadButton.disabled = false;
    progressContainer.style.display = 'none';
};

            xhr.onerror = () => {
                resultMessage.textContent = 'upload failed. please check your connection.';
                uploadButton.disabled = false;
            };

            xhr.send(formData);
        }

        function copyLink() {
            const linkText = downloadLink.href;
            navigator.clipboard.writeText(linkText).then(() => {
                const copyButton = document.getElementById('copyButton');
                copyButton.textContent = 'copied!';
                setTimeout(() => {
                    copyButton.textContent = 'copy';
                }, 2000);
            }).catch(err => {
                console.error('Failed to copy link: ', err);
            });
        }

        fileInput.addEventListener('change', () => {
            progressContainer.style.display = 'none';
            progressBar.style.width = '0%';
            progressText.textContent = '0%';
            uploadSuccess.style.display = 'none';
            uploadButton.disabled = false;
        });
    </script>
</body>
</html>

================
File: public/login.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - upfile.1</title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <a href="/" class="logo">upfile.1</a>
    <div class="auth-links">
        <a href="/register">register</a> | <a href="/login">login</a>
    </div>
    
    <div class="container">
        <form action="/login" method="POST" class="auth-form">
            <h2>Login</h2>
            <div class="form-group">
                <label for="username">username:</label>
                <input type="text" id="username" name="username" required>
            </div>
            <div class="form-group">
                <label for="password">password:</label>
                <input type="password" id="password" name="password" required>
            </div>
            <button type="submit">login</button>
        </form>
    </div>
</body>
</html>

================
File: public/profile.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile - upfile.1</title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <a href="/" class="logo">upfile.1</a>
    <div class="auth-links">
        <a href="/logout">logout</a>
    </div>
    
    <div class="container">
        <div class="profile-info">
            <h2>Profile</h2>
            <div class="info-row">
                
                <span class="label">username:</span>
                <span class="value"><%= user.username %></span>
            </div>
            <div class="info-row">
                <span class="label">email:</span>
                <span class="value"><%= user.email %></span>
            </div>
            <div class="info-row">
                <span class="label">joined:</span>
                <span class="value"><%= user.createdAt.toLocaleDateString() %></span>
            </div>
        </div>
    </div>
    <% if (user.isAdmin) { %>
        <div class="admin-section">
            <div class="admin-link">
                <a href="/admin-settings">admin settings</a>
            </div>
        </div>
    <% } %>
</body>
</html>

================
File: public/register.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register - upfile.1</title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <a href="/" class="logo">upfile.1</a>
    <div class="auth-links">
        <a href="/register">register</a> | <a href="/login">login</a>
    </div>
    
    <div class="container">
        <form action="/register" method="POST" class="auth-form">
            <h2>Register</h2>
            <div class="form-group">
                <label for="username">username:</label>
                <input type="text" id="username" name="username" required>
            </div>
            <div class="form-group">
                <label for="email">email:</label>
                <input type="email" id="email" name="email" required>
            </div>
            <div class="form-group">
                <label for="password">password:</label>
                <input type="password" id="password" name="password" required>
            </div>
            <button type="submit">register</button>
        </form>
    </div>
</body>
</html>

================
File: public/style.css
================
/* Reset and base styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Courier New', monospace;
}

body {
    min-height: 100vh;
    background-color: #ffffff;
    color: #1a1a1a;
    display: flex;
    flex-direction: column;
    padding: 2rem;
}

/* Logo styling */
.logo {
    position: fixed;
    top: 2rem;
    left: 2rem;
    font-size: 1.2rem;
    font-weight: bold;
    color: #1a1a1a;
}

/* Main container */
.container {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    max-width: 600px;
    margin: 0 auto;
    padding: 2rem;
}

/* Upload form */
.upload-form {
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

input[type="file"] {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #1a1a1a;
    border-radius: 4px;
    font-size: 0.9rem;
}

button {
    background-color: #1a1a1a;
    color: #ffffff;
    border: none;
    padding: 0.8rem 1.5rem;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.9rem;
    transition: background-color 0.2s;
}

button:hover {
    background-color: #333;
}

button:disabled {
    background-color: #999;
    cursor: not-allowed;
}

/* Progress bar */
.progress-container {
    width: 100%;
    margin: 1rem 0;
}

.progress {
    width: 100%;
    height: 4px;
    background-color: #eee;
    border-radius: 2px;
    overflow: hidden;
}

.progress-bar {
    height: 100%;
    background-color: #1a1a1a;
    transition: width 0.3s ease;
}

.progress-text {
    margin-top: 0.5rem;
    font-size: 0.9rem;
    text-align: center;
}

/* Result message and link container */
.result-message {
    width: 100%;
    margin-top: 1rem;
}

.link-container {
    display: flex;
    gap: 0.5rem;
    margin-top: 1rem;
    padding: 1rem;
    background-color: #f5f5f5;
    border-radius: 4px;
    word-break: break-all;
}

.link-container a {
    flex: 1;
    color: #1a1a1a;
    text-decoration: none;
    font-size: 0.9rem;
}

.link-container a:hover {
    text-decoration: underline;
}

/* Download page specific styles */
.download-info {
    width: 100%;
    margin-bottom: 2rem;
}

.info-row {
    display: flex;
    margin-bottom: 1rem;
    font-size: 0.9rem;
}

.info-row .label {
    min-width: 4rem;
    color: #666;
}

.info-row .value {
    word-break: break-all;
}

.download-button {
    min-width: 150px;
}

/* Success message */
#uploadSuccess p {
    text-align: center;
    color: #1a1a1a;
    margin-bottom: 1rem;
}

/* Auth links */
.auth-links {
    position: fixed;
    top: 2rem;
    right: 2rem;
    font-size: 1rem;
}

.auth-links a {
    color: #1a1a1a;
    text-decoration: none;
}

.auth-links a:hover {
    text-decoration: underline;
}

/* Auth forms */
.auth-form {
    width: 100%;
    max-width: 400px;
    padding: 2rem;
    border: 1px solid #eee;
    border-radius: 4px;
}

.auth-form h2 {
    margin-bottom: 1.5rem;
    text-align: center;
}

.form-group {
    margin-bottom: 1rem;
}

.form-group label {
    display: block;
    margin-bottom: 0.5rem;
}

.form-group input {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #1a1a1a;
    border-radius: 4px;
    font-size: 0.9rem;
}

/* Profile styles */
.profile-info {
    width: 100%;
    max-width: 600px;
}

.profile-info h2 {
    margin-bottom: 2rem;
    text-align: center;
}

/* Admin styles */
.admin-link {
    margin-top: 2rem;
    text-align: center;
}

.admin-link a {
    font-family: 'Courier New', monospace;
    color: #1a1a1a;
    text-decoration: none;
}

.admin-link a:hover {
    text-decoration: underline;
}

.admin-settings {
    width: 100%;
    max-width: 500px;
}

.settings-form {
    margin-top: 2rem;
}

.settings-info {
    margin-top: 1rem;
    text-align: center;
    font-size: 0.9rem;
    color: #666;
}

/* Update this in public/style.css */
.logo {
    position: fixed;
    top: 2rem;
    left: 2rem;
    font-size: 1.2rem;
    font-weight: bold;
    color: #1a1a1a;
    text-decoration: none;
}

.logo:hover {
    text-decoration: underline; /* Matches other link hover effects */
}

================
File: .gitignore
================
# Dependencies
node_modules/
package-lock.json

# Upload directories
uploads/*
!uploads/.gitkeep

# Environment variables
.env
.env.local
.env.*.local

# Log files
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids/
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov/

# Coverage directory used by tools like istanbul
coverage/

# Temporary files
*.tmp
*.temp
.DS_Store
Thumbs.db

# IDE specific files
.idea/
.vscode/
*.swp
*.swo
*.swn
*.bak

# Build directory
dist/
build/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# Compressed files
*.zip
*.rar
*.7z
*.gz
*.zst

================
File: package.json
================
{
  "name": "upfile",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "bcrypt": "^5.1.1",
    "body-parser": "^1.20.3",
    "crypto": "^1.0.1",
    "ejs": "^3.1.10",
    "express": "^4.21.1",
    "express-session": "^1.18.1",
    "fs": "^0.0.1-security",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.7.2",
    "multer": "^1.4.5-lts.1",
    "path": "^0.12.7"
  }
}

================
File: server.js
================
const express = require('express');
const fs = require('fs');
const crypto = require('crypto');
const path = require('path');
const multer = require('multer');
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
const session = require('express-session');
const bodyParser = require('body-parser');

const app = express();
const port = 3000;

// MongoDB connection
mongoose.connect('mongodb://localhost/upfile', { 
    useNewUrlParser: true, 
    useUnifiedTopology: true 
}).then(() => {
    console.log('Connected to MongoDB');
}).catch(err => {
    console.error('MongoDB connection error:', err);
});

// User Schema
const userSchema = new mongoose.Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    isAdmin: { type: Boolean, default: false },
    createdAt: { type: Date, default: Date.now }
});

const User = mongoose.model('User', userSchema);

const settingsSchema = new mongoose.Schema({
    maxUploadSize: { type: Number, default: 0 * 1024 * 1024 }, // Default unlimited
    lastUpdated: { type: Date, default: Date.now }
});

const Settings = mongoose.model('Settings', settingsSchema);

// Initialize default settings
async function initializeSettings() {
    try {
        const settings = await Settings.findOne();
        if (!settings) {
            await new Settings({}).save();
        }
    } catch (error) {
        console.error('Error initializing settings:', error);
    }
}
initializeSettings();

// Middleware
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'public'));
app.use(express.static('public'));
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.use(session({
    secret: 'your-secret-key',
    resave: false,
    saveUninitialized: false,
    cookie: { secure: false } // set to true if using HTTPS
}));

// Multer configuration
const storage = multer.diskStorage({
    destination: './uploads/',
    filename: (req, file, cb) => {
        const uniqueSuffix = crypto.randomBytes(8).toString('hex');
        cb(null, uniqueSuffix + path.extname(file.originalname));
    }
});

const upload = multer({
    storage: storage,
    limits: {
        fileSize: 100 * 1024 * 1024 // Default limit, will be overridden
    },
    fileFilter: async (req, file, cb) => {
        try {
            const maxSize = await getFileSize();
            if (parseInt(req.headers['content-length']) > maxSize) {
                cb(new Error('File size exceeds the limit'));
                return;
            }
            cb(null, true);
        } catch (error) {
            cb(error);
        }
    }
});

const fileLinks = {};

// Authentication middleware
const requireAuth = (req, res, next) => {
    if (!req.session.userId) {
        return res.redirect('/login');
    }
    next();
};

// Routes
app.get('/', (req, res) => {
    res.render('index');  // Instead of res.sendFile()
});

// Authentication routes
app.get('/register', (req, res) => {
    res.render('register');
});

app.post('/register', async (req, res) => {
    try {
        const userCount = await User.countDocuments();
        const hashedPassword = await bcrypt.hash(req.body.password, 10);
        const user = new User({
            username: req.body.username,
            password: hashedPassword,
            email: req.body.email,
            isAdmin: userCount === 0 // First user becomes admin
        });
        await user.save();
        res.redirect('/login');
    } catch (error) {
        console.error('Registration error:', error);
        res.redirect('/register');
    }
});

app.get('/login', (req, res) => {
    res.render('login');
});

app.post('/login', async (req, res) => {
    try {
        const user = await User.findOne({ username: req.body.username });
        if (user && await bcrypt.compare(req.body.password, user.password)) {
            req.session.userId = user._id;
            res.redirect('/profile');
        } else {
            res.redirect('/login');
        }
    } catch (error) {
        console.error('Login error:', error);
        res.redirect('/login');
    }
});

app.get('/profile', requireAuth, async (req, res) => {
    try {
        const user = await User.findById(req.session.userId);
        res.render('profile', { user });
    } catch (error) {
        console.error('Profile error:', error);
        res.redirect('/login');
    }
});

app.get('/logout', (req, res) => {
    req.session.destroy();
    res.redirect('/');
});

// Admin middleware
const requireAdmin = async (req, res, next) => {
    if (!req.session.userId) {
        return res.redirect('/login');
    }
    const user = await User.findById(req.session.userId);
    if (!user || !user.isAdmin) {
        return res.redirect('/profile');
    }
    next();
};

// Admin settings GET route
app.get('/admin-settings', requireAdmin, async (req, res) => {
    try {
        const settings = await Settings.findOne();
        const user = await User.findById(req.session.userId);
        res.render('admin-settings', { 
            user,
            settings: settings || { maxUploadSize: 100 * 1024 * 1024, lastUpdated: new Date() }
        });
    } catch (error) {
        console.error('Admin settings error:', error);
        res.redirect('/profile');
    }
});

// Admin settings POST route
app.post('/admin-settings', requireAdmin, async (req, res) => {
    try {
        const maxSize = parseInt(req.body.maxUploadSize);
        await Settings.findOneAndUpdate({}, {
            maxUploadSize: maxSize * 1024 * 1024, // Convert MB to bytes
            lastUpdated: new Date()
        }, { upsert: true });
        res.redirect('/admin-settings');
    } catch (error) {
        console.error('Settings update error:', error);
        res.redirect('/admin-settings');
    }
});

// File upload routes
app.post('/upload', async (req, res) => {
    try {
        const uploadMiddleware = upload.single('file');
        
        uploadMiddleware(req, res, async function(err) {
            if (err) {
                if (err.code === 'LIMIT_FILE_SIZE' || err.message === 'File size exceeds the limit') {
                    const settings = await Settings.findOne();
                    const maxSizeMB = (settings.maxUploadSize / (1024 * 1024)).toFixed(2);
                    return res.status(400).json({
                        success: false,
                        message: `File size exceeds the limit of ${maxSizeMB} MB`
                    });
                }
                return res.status(400).json({
                    success: false,
                    message: 'Error uploading file'
                });
            }

            if (!req.file) {
                return res.status(400).json({
                    success: false,
                    message: 'No file uploaded.'
                });
            }

            const downloadId = crypto.randomBytes(8).toString('hex');
            const filePath = path.join(__dirname, 'uploads', req.file.filename);
            fileLinks[downloadId] = { 
                filePath: filePath, 
                fileName: req.file.originalname 
            };
            
            const downloadLink = `/download/${downloadId}`;
            res.json({
                success: true,
                message: 'File uploaded successfully!',
                downloadLink: downloadLink
            });
        });
    } catch (error) {
        console.error('Upload error:', error);
        res.status(500).json({
            success: false,
            message: 'Server error during upload'
        });
    }
});

app.get('/download/:id', (req, res) => {
    const downloadId = req.params.id;
    const fileInfo = fileLinks[downloadId];
    
    if (!fileInfo) {
        return res.status(404).send('File not found.');
    }

    const fileSize = fs.statSync(fileInfo.filePath).size;
    const formattedSize = (fileSize / (1024 * 1024)).toFixed(2) + " MB";

    res.render('download', {
        fileName: fileInfo.fileName,
        fileSize: formattedSize
    });
});

app.get('/download/:id/download', (req, res) => {
    const downloadId = req.params.id;
    const fileInfo = fileLinks[downloadId];

    if (!fileInfo) {
        return res.status(404).send('File not found.');
    }

    res.download(fileInfo.filePath, fileInfo.fileName, (err) => {
        if (err) {
            console.error(`Error downloading file: ${err}`);
            res.status(500).send('Error downloading file.');
        }
    });
});

// Error handling middleware
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).send('Something broke!');
});

// Start server
app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});
