<!DOCTYPE html>
<html lang="en" data-theme="<%= theme %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-5004505836439441"
     crossorigin="anonymous"></script>
    <title>Profile - upfile.1</title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <a href="/" class="logo">upfile.1</a>
    <div class="auth-links">
        <a href="/logout">logout</a>
    </div>
    
    <div class="container">
        <div class="profile-info">
            <h2>Profile</h2>
            <div class="info-row">
                <span class="label">username:</span>
                <span class="value"><%= user.username %></span>
            </div>
            <div class="info-row">
                <span class="label">email:</span>
                <span class="value"><%= user.email %></span>
            </div>
            <div class="info-row">
                <span class="label">joined:</span>
                <span class="value"><%= user.createdAt.toLocaleDateString() %></span>
            </div>
        </div>

        <div class="uploaded-files-container">
            <h3>Your Uploads</h3>
            
            <!-- Search and Filter Bar -->
            <div class="files-control-panel">
                <div class="search-box">
                    <input type="text" id="fileSearch" placeholder="Search files..." />
                </div>
                <div class="filter-controls">
                    <select id="sortBy">
                        <option value="date-desc">Newest First</option>
                        <option value="date-asc">Oldest First</option>
                        <option value="name-asc">Name (A-Z)</option>
                        <option value="name-desc">Name (Z-A)</option>
                    </select>
                    <select id="filterType">
                        <option value="all">All Files</option>
                        <option value="encrypted">Encrypted Only</option>
                        <option value="unencrypted">Unencrypted Only</option>
                    </select>
                </div>
            </div>

            <!-- Files Grid -->
            <div class="files-grid" id="filesGrid">
                <% if (user.uploadedFiles.length > 0) { %>
                    <% user.uploadedFiles.forEach(file => { %>
                        <div class="file-card" data-filename="<%= file.fileName %>" data-date="<%= file.uploadDate.toISOString() %>" data-encrypted="<%= !!file.encryptionKey %>">
                            <div class="file-header">
                                <div class="file-icon">
                                    <%= getFileIcon(file.fileName) %>
                                </div>
                                <div class="file-info">
                                    <span class="file-name" title="<%= file.fileName %>"><%= file.fileName %></span>
                                    <span class="upload-date"><%= formatDate(file.uploadDate) %></span>
                                    <% if (file.encryptionKey) { %>
                                        <span class="encryption-badge">encrypted</span>
                                    <% } %>
                                </div>
                                <div class="file-actions">
                                    <button onclick="copyFileLink('<%= file.fileId %>')" class="action-button copy-button" title="Copy link" data-link="<%= baseUrl %>/download/<%= file.fileId %><%= file.encryptionKey ? '#key=' + file.encryptionKey + '&iv=' + file.encryptionIv : '' %>">
                                        copy
                                    </button>
                                    <button onclick="confirmDelete('<%= file.fileId %>', '<%= file.fileName %>')" class="action-button delete-button" title="Delete file">Ã—</button>
                                </div>
                            </div>
                        </div>
                    <% }) %>
                <% } else { %>
                    <div class="no-uploads">No uploaded files.</div>
                <% } %>
            </div>

            <!-- Pagination -->
            <div class="pagination">
                <button id="prevPage" disabled>Previous</button>
                <span id="pageInfo">Page 1</span>
                <button id="nextPage">Next</button>
            </div>
        </div>
    </div>

    <% if (user.isAdmin) { %>
        <div class="admin-section">
            <div class="admin-link">
                <a href="/admin-settings">admin settings</a>
            </div>
        </div>
    <% } %>

    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="modal">
        <div class="modal-content">
            <h4>Confirm Delete</h4>
            <p>Are you sure you want to delete <span id="deleteFileName"></span>?</p>
            <div class="modal-actions">
                <button onclick="closeModal()" class="cancel-button">Cancel</button>
                <form id="deleteForm" method="POST" style="display: inline;">
                    <button type="submit" class="delete-button">Delete</button>
                </form>
            </div>
        </div>
    </div>

    <style>
        .files-control-panel {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
            padding: 1rem;
            background-color: var(--input-bg);
            border-radius: 4px;
        }

        .search-box {
            flex: 1;
        }

        .search-box input {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            font-size: 0.9rem;
        }

        .filter-controls {
            display: flex;
            gap: 0.5rem;
        }

        .filter-controls select {
            padding: 0.5rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            background-color: var(--input-bg);
            color: var(--text-color);
        }

        .files-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
    margin-top: 1rem;
}

.file-card {
    background-color: var(--input-bg);
    border: 1px solid var(--border-color);
    border-radius: 4px;
    padding: 0.75rem;
    transition: transform 0.2s, box-shadow 0.2s;
    display: flex;
    flex-direction: column;
}

@media (max-width: 480px) {
    .file-header {
        flex-wrap: wrap;
    }
    
    .file-info {
        width: calc(100% - 3rem);
        order: 2;
    }
    
    .file-actions {
        width: 100%;
        margin-top: 0.5rem;
        order: 3;
    }
    
    .action-button {
        flex: 1;
    }
}

.uploaded-files-container {
    width: 100%;
    max-width: 1200px; /* Increased to accommodate larger screens */
    margin: 0 auto;
    padding: 1rem;
}


.file-header {
    display: flex;
    align-items: flex-start;
    width: 100%;
} 


        .file-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .file-icon {
    font-size: 1.5rem;
    min-width: 1.5rem;
    text-align: center;
}

.file-info {
    flex: 1;
    min-width: 0;
    overflow: hidden;
}


.file-name {
    display: block;
    font-weight: 500;
    font-size: 0.9rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    color: var(--text-color);
}

.upload-date {
    display: block;
    font-size: 0.75rem;
    color: #666;
    margin-top: 0.25rem;
}


.encryption-badge {
    display: inline-block;
    padding: 0.15rem 0.4rem;
    background-color: #2ecc71;
    color: white;
    border-radius: 3px;
    font-size: 0.7rem;
    margin-top: 0.25rem;
}

.link-row {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    flex-wrap: wrap; /* Add this to allow wrapping */
}

.file-url {
    flex: 1;
    min-width: 0; /* Add this */
    font-size: 0.8rem;
    padding: 0.35rem 0.5rem;
    border: 1px solid var(--border-color);
    border-radius: 3px;
    background-color: var(--bg-color);
    color: var(--text-color);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.icon-button {
    padding: 0.35rem 0.5rem; /* Reduce padding */
    font-size: 0.8rem;
    border-radius: 3px;
    min-width: auto; /* Remove minimum width */
    white-space: nowrap;
}

.copy-button {
    background-color: var(--text-color);
    color: var(--bg-color);
}

.delete-button {
    background-color: #ff4d4d;
    color: white;
    padding: 0.35rem 0.5rem;
}

.file-actions {
    display: flex;
    gap: 0.5rem;
    align-items: flex-start;
}
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 1rem;
            margin-top: 2rem;
            padding: 1rem;
        }

        .action-button {
    padding: 0.35rem 0.75rem;
    font-size: 0.8rem;
    border-radius: 3px;
    cursor: pointer;
    white-space: nowrap;
}

        .pagination button {
            padding: 0.5rem 1rem;
        }

        .pagination button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: var(--bg-color);
            padding: 2rem;
            border-radius: 4px;
            max-width: 500px;
            width: 90%;
        }

        .modal-actions {
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
            margin-top: 2rem;
        }

        .cancel-button {
            background-color: #666;
        }
    </style>

    <script>
        // File Management
        let currentPage = 1;
        const itemsPerPage = 12;
        let filteredFiles = [];

        function initializeFileManagement() {
            const fileCards = Array.from(document.querySelectorAll('.file-card'));
            filteredFiles = fileCards;
            updatePagination();
            showPage(1);
        }

        function filterFiles() {
            const searchTerm = document.getElementById('fileSearch').value.toLowerCase();
            const sortBy = document.getElementById('sortBy').value;
            const filterType = document.getElementById('filterType').value;

            const fileCards = Array.from(document.querySelectorAll('.file-card'));
            
            filteredFiles = fileCards.filter(card => {
                const fileName = card.dataset.filename.toLowerCase();
                const isEncrypted = card.dataset.encrypted === 'true';

                if (filterType === 'encrypted' && !isEncrypted) return false;
                if (filterType === 'unencrypted' && isEncrypted) return false;
                
                return fileName.includes(searchTerm);
            });

            // Sort files
            filteredFiles.sort((a, b) => {
                const aName = a.dataset.filename.toLowerCase();
                const bName = b.dataset.filename.toLowerCase();
                const aDate = new Date(a.dataset.date);
                const bDate = new Date(b.dataset.date);

                switch(sortBy) {
                    case 'name-asc':
                        return aName.localeCompare(bName);
                    case 'name-desc':
                        return bName.localeCompare(aName);
                    case 'date-asc':
                        return aDate - bDate;
                    case 'date-desc':
                        return bDate - aDate;
                    default:
                        return 0;
                }
            });

            currentPage = 1;
            updatePagination();
            showPage(1);
        }

        function showPage(page) {
            const startIndex = (page - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;

            const fileCards = Array.from(document.querySelectorAll('.file-card'));
            fileCards.forEach(card => card.style.display = 'none');

            filteredFiles.slice(startIndex, endIndex).forEach(card => {
                card.style.display = 'flex';
            });

            document.getElementById('pageInfo').textContent = `Page ${page}`;
            updatePaginationButtons(page);
        }

        function updatePagination() {
            const totalPages = Math.ceil(filteredFiles.length / itemsPerPage);
            document.getElementById('prevPage').disabled = currentPage === 1;
            document.getElementById('nextPage').disabled = currentPage === totalPages;
        }

        function updatePaginationButtons(page) {
            const totalPages = Math.ceil(filteredFiles.length / itemsPerPage);
            document.getElementById('prevPage').disabled = page === 1;
            document.getElementById('nextPage').disabled = page === totalPages;
        }

        // Event Listeners
        document.getElementById('fileSearch').addEventListener('input', filterFiles);
        document.getElementById('sortBy').addEventListener('change', filterFiles);
        document.getElementById('filterType').addEventListener('change', filterFiles);

        document.getElementById('prevPage').addEventListener('click', () => {
            if (currentPage > 1) {
                currentPage--;
                showPage(currentPage);
            }
        });

        document.getElementById('nextPage').addEventListener('click', () => {
            const totalPages = Math.ceil(filteredFiles.length / itemsPerPage);
            if (currentPage < totalPages) {
                currentPage++;
                showPage(currentPage);
            }
        });

        // Copy Link Function
        function copyFileLink(fileId) {
    const button = document.querySelector(`[data-link][onclick*="${fileId}"]`);
    const link = button.dataset.link;
    
    navigator.clipboard.writeText(link).then(() => {
        button.textContent = 'copied!';
        setTimeout(() => {
            button.textContent = 'copy';
        }, 2000);
    }).catch(err => {
        console.error('Failed to copy link: ', err);
    });
}

        // Delete Functions
        function confirmDelete(fileId, fileName) {
            const modal = document.getElementById('deleteModal');
            const form = document.getElementById('deleteForm');
            const fileNameSpan = document.getElementById('deleteFileName');
            
            modal.style.display = 'block';
            fileNameSpan.textContent = fileName;
            form.action = `/delete-upload/${fileId}`;
        }

        function closeModal() {
            document.getElementById('deleteModal').style.display = 'none';
        }

        // Initialize
        window.onload = initializeFileManagement;

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('deleteModal');
            if (event.target === modal) {
                closeModal();
            }
        }
    </script>

    <% if (!user.isAdmin) { %>
        <div class="footer">
            <a href="/about">about us</a>
        </div>
    <% } %>
</body>
</html>