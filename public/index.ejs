<!DOCTYPE html>
<html lang="en" data-theme="<%= theme %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>upfile.1 - File Sharing</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <a href="/" class="logo">upfile.1</a>
    <div class="auth-links">
        <a href="/register">register</a> | <a href="/login">login</a>
    </div>
    <div class="container">
        <div class="upload-form">
            <input type="file" id="fileInput" name="file" required>
            <button id="uploadButton" onclick="uploadFile()">upload</button>
        </div>

        <!-- Progress bar container -->
        <div class="progress-container" id="progressContainer" style="display: none;">
            <div class="progress">
                <div class="progress-bar" id="progressBar"></div>
            </div>
            <div class="progress-text" id="progressText">0%</div>
        </div>

        <!-- Result message and success container -->
<div class="result-message">
    <!-- Error messages will go here -->
    <div id="resultMessage"></div>
    <!-- Success message with link -->
    <div id="uploadSuccess" style="display: none;">
        <p>file uploaded successfully</p>
        <div class="link-container">
            <a id="downloadLink" href="" target="_blank"></a>
            <button id="copyButton" onclick="copyLink()">
                copy
            </button>
        </div>
    </div>
</div>
    </div>

    <script>
     // Keep your existing variable declarations
const fileInput = document.getElementById('fileInput');
const uploadButton = document.getElementById('uploadButton');
const progressContainer = document.getElementById('progressContainer');
const progressBar = document.getElementById('progressBar');
const progressText = document.getElementById('progressText');
const resultMessage = document.getElementById('resultMessage');
const uploadSuccess = document.getElementById('uploadSuccess');
const downloadLink = document.getElementById('downloadLink');

// Add this new function
async function getMaxFileSize() {
    try {
        const response = await fetch('/get-max-file-size');
        const data = await response.json();
        return data.maxSize;
    } catch (error) {
        console.error('Error getting max file size:', error);
        return null;
    }
}

// Update your existing uploadFile function to be async
async function uploadFile() {
    const file = fileInput.files[0];
    if (!file) {
        alert('Please select a file first!');
        return;
    }

    // Add this new size check
    const maxSize = await getMaxFileSize();
    if (maxSize && file.size > maxSize) {
        const maxSizeMB = (maxSize / (1024 * 1024)).toFixed(2);
        resultMessage.textContent = `File size exceeds the limit of ${maxSizeMB} MB`;
        return;
    }

    // Rest of your existing uploadFile function stays the same
    progressContainer.style.display = 'block';
    uploadButton.disabled = true;
    uploadSuccess.style.display = 'none';
    resultMessage.textContent = '';

    const formData = new FormData();
    formData.append('file', file);

    const xhr = new XMLHttpRequest();
    xhr.open('POST', '/upload', true);

    xhr.upload.onprogress = (event) => {
        if (event.lengthComputable) {
            const percent = (event.loaded / event.total) * 100;
            progressBar.style.width = percent + '%';
            progressText.textContent = Math.round(percent) + '%';
        }
    };

    xhr.onload = () => {
        try {
            const response = JSON.parse(xhr.responseText);
            
            if (xhr.status === 200 && response.success) {
                // Hide progress bar
                progressContainer.style.display = 'none';
                
                // Show success message and link
                const fullUrl = window.location.origin + response.downloadLink;
                downloadLink.href = fullUrl;
                downloadLink.textContent = fullUrl;
                uploadSuccess.style.display = 'block';
                resultMessage.textContent = '';
            } else {
                // Show error message
                progressContainer.style.display = 'none';
                uploadSuccess.style.display = 'none';
                resultMessage.textContent = response.message || 'Upload failed. Please try again.';
            }
        } catch (e) {
            // Handle parsing error
            progressContainer.style.display = 'none';
            uploadSuccess.style.display = 'none';
            resultMessage.textContent = 'Upload failed. Please try again.';
        }
        
        // Re-enable upload button
        uploadButton.disabled = false;
    };

    xhr.onerror = () => {
        progressContainer.style.display = 'none';
        uploadSuccess.style.display = 'none';
        resultMessage.textContent = 'Upload failed. Please check your connection.';
        uploadButton.disabled = false;
    };

    xhr.send(formData);
}

// Keep your existing copyLink function
function copyLink() {
    const linkText = downloadLink.href;
    navigator.clipboard.writeText(linkText).then(() => {
        const copyButton = document.getElementById('copyButton');
        copyButton.textContent = 'copied!';
        setTimeout(() => {
            copyButton.textContent = 'copy';
        }, 2000);
    }).catch(err => {
        console.error('Failed to copy link: ', err);
    });
}

fileInput.addEventListener('change', () => {
    progressContainer.style.display = 'none';
    progressBar.style.width = '0%';
    progressText.textContent = '0%';
    uploadSuccess.style.display = 'none';
    resultMessage.textContent = ''; // Clear any error messages
    uploadButton.disabled = false;
});
    </script>
    <div class="footer">
        <a href="/about">about us</a>
    </div>
</body>
</html>