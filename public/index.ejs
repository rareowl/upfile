<!DOCTYPE html>
<html lang="en" data-theme="<%= theme %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-5004505836439441"
     crossorigin="anonymous"></script>
    <title>upfile.1 - File Sharing</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <a href="/" class="logo">upfile.1</a>
    <div class="auth-links">
        <% if (session.userId) { %>
            <a href="/profile">profile</a> | <a href="/logout">logout</a>
        <% } else { %>
            <a href="/register">register</a> | <a href="/login">login</a>
        <% } %>
    </div>
    <div class="container">
        <div class="upload-form">
            <input type="file" id="fileInput" name="file" required>
            <button id="uploadButton" onclick="uploadFile()">upload</button>
        </div>

        <!-- Progress bar container -->
        <div class="progress-container" id="progressContainer" style="display: none;">
            <!-- Progress stages -->
            <div class="progress-stages">
                <div class="stage-line"></div>
                <div class="progress-stage" id="stagePrep">
                    <div class="stage-dot"></div>
                    <div class="stage-label">Prep</div>
                </div>
                <div class="progress-stage" id="stageUpload">
                    <div class="stage-dot"></div>
                    <div class="stage-label">Upload</div>
                </div>
                <div class="progress-stage" id="stageProcess">
                    <div class="stage-dot"></div>
                    <div class="stage-label">Process</div>
                </div>
                <div class="progress-stage" id="stageComplete">
                    <div class="stage-dot"></div>
                    <div class="stage-label">Done</div>
                </div>
            </div>

            <!-- Progress stats -->
            <div class="progress-stats">
                <div class="progress-detail" id="progressDetail"></div>
                <div class="progress-text" id="progressText">0%</div>
            </div>

            <!-- Progress bar -->
            <div class="progress">
                <div class="progress-bar" id="progressBar"></div>
            </div>

            <!-- Status message -->
            <div class="progress-status" id="progressStatus"></div>
        </div>

        <!-- Result message and success container -->
        <div class="result-message">
            <div id="resultMessage"></div>
            <div id="uploadSuccess" style="display: none;">
                <p>file uploaded successfully</p>
                <div class="link-container">
                    <a id="downloadLink" href="" target="_blank"></a>
                    <button id="copyButton" onclick="copyLink()">
                        copy
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Utility function to format bytes
        function formatBytes(bytes, decimals = 2) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const dm = decimals < 0 ? 0 : decimals;
            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
        }

        // Progress UI update function
        function updateStage(stageName) {
            const stages = ['Prep', 'Upload', 'Process', 'Complete'];
            stages.forEach(stage => {
                const element = document.getElementById(`stage${stage}`);
                element.classList.remove('active', 'completed');
            });

            const currentIndex = stages.indexOf(stageName);
            for(let i = 0; i <= currentIndex; i++) {
                const element = document.getElementById(`stage${stages[i]}`);
                if (i < currentIndex) {
                    element.classList.add('completed');
                } else if (i === currentIndex) {
                    element.classList.add('active');
                }
            }
        }

        // DOM element references
        const fileInput = document.getElementById('fileInput');
        const uploadButton = document.getElementById('uploadButton');
        const progressContainer = document.getElementById('progressContainer');
        const progressBar = document.getElementById('progressBar');
        const progressText = document.getElementById('progressText');
        const progressDetail = document.getElementById('progressDetail');
        const progressStatus = document.getElementById('progressStatus');
        const resultMessage = document.getElementById('resultMessage');
        const uploadSuccess = document.getElementById('uploadSuccess');
        const downloadLink = document.getElementById('downloadLink');

        // Configuration checks
        async function getMaxFileSize() {
            try {
                const response = await fetch('/get-max-file-size');
                const data = await response.json();
                return data.maxSize;
            } catch (error) {
                console.error('Error getting max file size:', error);
                return null;
            }
        }

        async function getEncryptionStatus() {
            try {
                const response = await fetch('/get-encryption-status');
                const data = await response.json();
                return data.encryptionEnabled;
            } catch (error) {
                console.error('Error getting encryption status:', error);
                return true;
            }
        }

        // Chunked upload implementation
        async function uploadFile() {
    const file = fileInput.files[0];
    if (!file) {
        alert('Please select a file first!');
        return;
    }

    try {
        progressContainer.style.display = 'block';
        uploadButton.disabled = true;
        uploadSuccess.style.display = 'none';
        resultMessage.textContent = '';

        // Preparation stage
        updateStage('Prep');
        progressBar.style.width = '0%';
        progressText.textContent = '0%';
        progressDetail.textContent = `Preparing to process ${formatBytes(file.size)}...`;
        progressStatus.textContent = 'Getting ready...';

        // Initialize upload
        const initResponse = await fetch('/init-upload', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                fileName: file.name,
                fileSize: file.size
            })
        });

        if (!initResponse.ok) {
            const error = await initResponse.json();
            throw new Error(error.error || 'Failed to initialize upload');
        }

        const { uploadId, chunkSize } = await initResponse.json();
        const totalChunks = Math.ceil(file.size / chunkSize);
        let uploadedChunks = 0;

        // Upload stage
        updateStage('Upload');
        progressBar.style.width = '25%';
        progressText.textContent = '25%';

        // Upload chunks
        for (let chunkStart = 0; chunkStart < file.size; chunkStart += chunkSize) {
            const chunkEnd = Math.min(chunkStart + chunkSize, file.size);
            const chunk = file.slice(chunkStart, chunkEnd);
            
            const formData = new FormData();
            const chunkBlob = new Blob([chunk], { type: file.type });
            
            formData.append('chunk', chunkBlob, 'chunk');
            formData.append('uploadId', uploadId);
            formData.append('chunkIndex', uploadedChunks.toString());
            formData.append('totalChunks', totalChunks.toString());

            const uploadResponse = await fetch('/upload-chunk', {
                method: 'POST',
                body: formData
            });

            if (!uploadResponse.ok) {
                const error = await uploadResponse.json();
                throw new Error(error.error || `Failed to upload chunk ${uploadedChunks + 1}`);
            }

            uploadedChunks++;
            const totalProgress = (uploadedChunks / totalChunks) * 75;
            progressBar.style.width = `${25 + totalProgress}%`;
            progressText.textContent = Math.round(25 + totalProgress) + '%';
            progressDetail.textContent = `Uploading chunk ${uploadedChunks} of ${totalChunks}`;
            progressStatus.textContent = `${formatBytes(chunkEnd)} of ${formatBytes(file.size)}`;
        }

        // Process stage - Finalize upload
        updateStage('Process');
        progressBar.style.width = '90%';
        progressText.textContent = '90%';
        progressDetail.textContent = 'Finalizing upload...';
        progressStatus.textContent = 'Almost done...';

        const finalizeResponse = await fetch('/finalize-upload', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                uploadId,
                fileName: file.name
            })
        });

        if (!finalizeResponse.ok) {
            const error = await finalizeResponse.json();
            throw new Error(error.error || 'Failed to finalize upload');
        }

        const { downloadLink: fileLink, key, iv } = await finalizeResponse.json();

        // Complete stage
        updateStage('Complete');
        progressBar.style.width = '100%';
        progressText.textContent = '100%';
        progressDetail.textContent = 'Upload complete!';
        progressStatus.textContent = 'Ready to share';

        let fullUrl = `${window.location.origin}${fileLink}`;
        if (key && iv) {
            fullUrl += `#key=${key}&iv=${iv}`;
        }

        downloadLink.href = fullUrl;
        downloadLink.textContent = fullUrl;
        uploadSuccess.style.display = 'block';

        setTimeout(() => {
            progressContainer.style.display = 'none';
        }, 1000);

    } catch (error) {
        console.error('Upload error:', error);
        progressContainer.style.display = 'none';
        uploadSuccess.style.display = 'none';
        resultMessage.textContent = error.message || 'Error processing file. Please try again.';
    } finally {
        uploadButton.disabled = false;
    }
}

        function copyLink() {
            const linkText = downloadLink.href;
            navigator.clipboard.writeText(linkText).then(() => {
                const copyButton = document.getElementById('copyButton');
                copyButton.textContent = 'copied!';
                setTimeout(() => {
                    copyButton.textContent = 'copy';
                }, 2000);
            }).catch(err => {
                console.error('Failed to copy link: ', err);
            });
        }

        fileInput.addEventListener('change', () => {
            progressContainer.style.display = 'none';
            progressBar.style.width = '0%';
            progressText.textContent = '0%';
            progressDetail.textContent = '';
            uploadSuccess.style.display = 'none';
            resultMessage.textContent = '';
            uploadButton.disabled = false;
        });
    </script>

    <div class="footer">
        <a href="/about">about us</a>
    </div>
</body>
</html>