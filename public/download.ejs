<!DOCTYPE html>
<html lang="en" data-theme="<%= theme %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Download - upfile.1</title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <a href="/" class="logo">upfile.1</a>
    
    <div class="container">
        <div class="download-info">
            <div class="info-row">
                <span class="label">file:</span>
                <span class="value"><%= fileName %></span>
            </div>
            <div class="info-row">
                <span class="label">size:</span>
                <span class="value"><%= fileSize %></span>
            </div>
            <% if (encrypted) { %>
            <div class="info-row">
                <span class="label">status:</span>
                <span class="value">encrypted</span>
            </div>
            <% } %>
        </div>
        <button onclick="startDownload()" class="download-button" id="downloadButton">download</button>

        <!-- Progress bar container -->
        <div class="progress-container" id="progressContainer" style="display: none;">
            <!-- Progress stages -->
            <div class="progress-stages">
                <div class="stage-line"></div>
                <div class="progress-stage" id="stagePrep">
                    <div class="stage-dot"></div>
                    <div class="stage-label">Prep</div>
                </div>
                <div class="progress-stage" id="stageDownload">
                    <div class="stage-dot"></div>
                    <div class="stage-label">Download</div>
                </div>
                <div class="progress-stage" id="stageProcess">
                    <div class="stage-dot"></div>
                    <div class="stage-label">Process</div>
                </div>
                <div class="progress-stage" id="stageComplete">
                    <div class="stage-dot"></div>
                    <div class="stage-label">Done</div>
                </div>
            </div>

            <!-- Progress stats -->
            <div class="progress-stats">
                <div class="progress-detail" id="progressDetail"></div>
                <div class="progress-text" id="progressText">0%</div>
            </div>

            <!-- Progress bar -->
            <div class="progress">
                <div class="progress-bar" id="progressBar"></div>
            </div>

            <!-- Status message -->
            <div class="progress-status" id="progressStatus"></div>
        </div>
    </div>

    <script>
        function formatBytes(bytes, decimals = 2) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const dm = decimals < 0 ? 0 : decimals;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
        }

        const progressContainer = document.getElementById('progressContainer');
        const progressBar = document.getElementById('progressBar');
        const progressText = document.getElementById('progressText');
        const progressDetail = document.getElementById('progressDetail');
        const progressStatus = document.getElementById('progressStatus');
        const downloadButton = document.getElementById('downloadButton');

        function updateStage(stageName) {
            const stages = ['Prep', 'Download', 'Process', 'Complete'];
            stages.forEach(stage => {
                const element = document.getElementById(`stage${stage}`);
                element.classList.remove('active', 'completed');
            });

            const currentIndex = stages.indexOf(stageName);
            for(let i = 0; i <= currentIndex; i++) {
                const element = document.getElementById(`stage${stages[i]}`);
                if (i < currentIndex) {
                    element.classList.add('completed');
                } else if (i === currentIndex) {
                    element.classList.add('active');
                }
            }
        }

        async function startDownload() {
            try {
                downloadButton.disabled = true;
                progressContainer.style.display = 'block';

                // Check download status
                updateStage('Prep');
                progressBar.style.width = '0%';
                progressText.textContent = '0%';
                progressDetail.textContent = 'Checking download status...';
                progressStatus.textContent = 'Preparing download...';

                const response = await fetch('/check-download-status');
                if (!response.ok) {
                    throw new Error('Failed to check download status');
                }
                const data = await response.json();
                
                if (data.willBeThrottled) {
                    alert('You have exceeded your download limit. Download speed will be throttled.');
                }

                // Start download
                updateStage('Download');
                progressDetail.textContent = 'Starting download...';
                progressStatus.textContent = 'Downloading file...';
                progressBar.style.width = '25%';
                progressText.textContent = '25%';

                const downloadResponse = await fetch(window.location.pathname + '/download');
                if (!downloadResponse.ok) {
                    throw new Error(`Download failed with status: ${downloadResponse.status}`);
                }

                const contentLength = downloadResponse.headers.get('Content-Length');
                const isEncrypted = downloadResponse.headers.get('X-File-Encrypted') === 'true';

                progressBar.style.width = '50%';
                progressText.textContent = '50%';
                progressDetail.textContent = 'Processing download...';

                const blob = await downloadResponse.blob();

                if (isEncrypted) {
                    updateStage('Process');
                    progressBar.style.width = '75%';
                    progressText.textContent = '75%';
                    progressDetail.textContent = 'Decrypting file...';
                    progressStatus.textContent = 'Processing file...';

                    const fragment = window.location.hash.substring(1);
                    const params = new URLSearchParams(fragment);
                    const keyHex = params.get('key');
                    const ivHex = params.get('iv');

                    if (!keyHex || !ivHex) {
                        throw new Error('Missing decryption keys');
                    }

                    const decryptedBlob = await decryptFile(blob, keyHex, ivHex);
                    
                    updateStage('Complete');
                    progressBar.style.width = '100%';
                    progressText.textContent = '100%';
                    progressDetail.textContent = 'Download complete!';
                    progressStatus.textContent = 'Finalizing...';

                    const url = window.URL.createObjectURL(decryptedBlob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = '<%= fileName %>';
                    document.body.appendChild(a);
                    a.click();

                    setTimeout(() => {
                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(a);
                        progressContainer.style.display = 'none';
                        downloadButton.disabled = false;
                    }, 1000);
                } else {
                    updateStage('Complete');
                    progressBar.style.width = '100%';
                    progressText.textContent = '100%';
                    progressDetail.textContent = 'Download complete!';
                    progressStatus.textContent = 'Ready!';

                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = '<%= fileName %>';
                    document.body.appendChild(a);
                    a.click();

                    setTimeout(() => {
                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(a);
                        progressContainer.style.display = 'none';
                        downloadButton.disabled = false;
                    }, 1000);
                }
            } catch (error) {
                console.error('Download error:', error);
                progressDetail.textContent = 'Error: ' + error.message;
                progressStatus.textContent = 'Download failed';
                progressContainer.style.display = 'none';
                downloadButton.disabled = false;
                alert('Download failed: ' + error.message);
            }
        }

        // Decryption helper functions remain the same...
        async function decryptFile(encryptedBlob, keyHex, ivHex) {
            try {
                progressDetail.textContent = 'Preparing for decryption...';
                
                const keyData = new Uint8Array(keyHex.match(/.{2}/g).map(byte => parseInt(byte, 16)));
                const key = await window.crypto.subtle.importKey(
                    "raw",
                    keyData,
                    "AES-GCM",
                    true,
                    ["decrypt"]
                );
                
                const iv = new Uint8Array(ivHex.match(/.{2}/g).map(byte => parseInt(byte, 16)));
                
                progressDetail.textContent = 'Reading encrypted file...';
                
                const encryptedBuffer = await encryptedBlob.arrayBuffer();
                
                progressDetail.textContent = `Decrypting ${formatBytes(encryptedBuffer.byteLength)}...`;
                
                const decryptedContent = await window.crypto.subtle.decrypt(
                    {
                        name: "AES-GCM",
                        iv: iv
                    },
                    key,
                    encryptedBuffer
                );
                
                progressDetail.textContent = 'Decryption complete!';
                
                return new Blob([decryptedContent]);
            } catch (error) {
                console.error('Decryption error:', error);
                throw new Error('Failed to decrypt file: ' + error.message);
            }
        }
    </script>

    <div class="footer">
        <a href="/about">about us</a>
    </div>
</body>
</html>